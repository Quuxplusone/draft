<pre class='metadata'>
Title: Variadic friends
Shortname: D2893
Revision: 1
!Draft Revision: 7
Audience: CWG
Status: D
Group: WG21
URL:
Editor: Jody Hagins, coachhagins@gmail.com
Editor: Arthur O'Dwyer, arthur.j.odwyer@gmail.com
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract:
  Support `friend Ts...` in C++26.
Date: 2024-02-09
</pre>

<style>
hilite  {background-color: #FFFF00; font-weight: bold;}
ins  {background-color: #CCFFCC; text-decoration: underline;}
del  {background-color: #FFCACA; text-decoration: line-through;}
</style>

# Changelog # {#changelog}

- R1 (post-Kona 2023):

    - New and improved wording after CWG feedback ([minutes](https://wiki.edg.com/bin/view/Wg21kona2023/CoreWorkingGroup#P2893R1))

    - Add feature-test macro `__cpp_variadic_friend`


# Introduction # {#introduction}

This paper proposes support for granting friendship to all classes in a parameter pack. Several existing idioms
are implemented by providing friendship to a class via template parameter. However, these patterns can only
be used with a single template parameter, because friendship cannot be currently granted to a pack of types.

<table>
<tr><th>Before</th><th>After</th></tr>
<tr><td><pre>template&lt;class T=void,
         class U=void>
class Foo {
  friend T;
  friend U;
};
</pre></td><td><pre>
template&lt;class... Ts>
class Foo {
  friend Ts...;
};
</pre></td></tr>
</table>

## Passkey idiom ## {#passkey-idiom}

The Passkey idiom allows granting access to individual member functions
on a per-function basis. In the example below, `C` grants friendship to `A`,
meaning that `A::m` can access all of `C`'s internals. But `C` also grants
access to `intentionalA` and `intentionalB` using the Passkey idiom.
Class `Passkey<B>` has a private constructor accessible only to its friend `B`,
so nobody but `B` can construct instances of `Passkey<B>`. You can't call
`intentionalB` without an instance of `Passkey<B>` as the first argument.
So, even though `intentionalB` is public, it is callable only from `B`.

```cpp
template<class T>
class Passkey {
  friend T;
  Passkey() {}
};

class A;
class B;

class C {
  friend A;
private:
  void internal();
public:
  void intentionalA(Passkey<A>);
  void intentionalB(Passkey<B>);
};

class A {
  void m(C& c) {
    c.internal(); // OK
    c.intentionalA({}); // OK
    c.intentionalB({}); // Error, Passkey<B>'s ctor is inaccessible
  }
};

class B {
  void m(C& c) {
    c.intentionalB({}); // OK
  }
};
```

We would like to expand this idiom, and grant access to `Foo::intentional`
from multiple classes.

```cpp
template<class... Ts>
class Passkey {
  friend Ts...; // Today: Error. Proposed: OK
  Passkey() {}
};

class C {
public:
  // Only callable from Blarg, Blip, and Baz
  void intentional(Passkey<Blarg, Blip, Baz>);
};
```

## CRTP access to derived ## {#crtp-access}

Another common pattern is to inherit from some class template, passing the
type of the derived class as a template parameter to the base class.

There may be parts of the derived class API which are needed in the base class,
but only the base class, so they are private, and friendship is granted to
the base class.

```cpp
template<class Crtp, class MsgT>
class Receiver {
  void receive(MsgT) {
    static_cast<Crtp*>(this)->private_ += 1;
  }
};

template<class MsgT>
struct Dispatcher :
  public Receiver<Dispatcher<MsgT>, MsgT>
{
  using Receiver<Dispatcher, MsgT>::Receiver;
  friend Receiver<Dispatcher, MsgT>;

private:
  int private_;
};
```

To support multiple base classes, we would like to make `Dispatcher` variadic:

```cpp
template<class Crtp, class MsgT>
class Receiver {
  void receive(MsgT) {
    static_cast<Crtp*>(this)->private_ += 1;
  }
};

template<class... MsgTs>
struct Dispatcher :
  public Receiver<Dispatcher<MsgTs...>, MsgTs>... // OK
{
  using Receiver<Dispatcher, MsgTs>::Receiver...;  // OK
  friend Receiver<Dispatcher, MsgTs>...; // Today: Error. Proposed: OK

private:
  int private_;
};
```

Note that both inheritance and `using` support pack-expansion. Only `friend` does not.

# Confusing grammatical examples # {#confusing}

The following two subsections merely record some design notes
in case we want to refer back to them during CWG discussion.
You can skip reading these subsections for now.

## `template<class... Ts> friend Ts...` ## {#not-for-stamping}

A declaration `template<class T> friend ~~~` is not a template for stamping out friends;
it is a request to befriend a specific template.

```cpp
template<class T>
friend class C::Nested;
```

declares that `C` has a member named `Nested` which itself is a class template, and we're
befriending that template. That is:

```cpp
struct C { template<class T> class Nested; };
struct S {
  template<class T>
  friend class C::Nested;
};
```

Therefore it is never well-formed to use the parameters of the friend declaration's own *template-head*
within the declarator itself. That is, these are all ill-formed, and replacing today's `U` with tomorrow's `Us...`
won't change anything:

<table>
<tr><th>Before</th><th>After</th></tr>
<tr><td><pre>
template&lt;class T>
struct S {
  template&lt;class U>
  friend U; // ill-formed
  &nbsp;
  template&lt;class U>
  friend class U; // ill-formed
  &nbsp;
  template&lt;class U>
  friend class C&lt;T>::Nested&lt;U>; // ill-formed
  &nbsp;
  &nbsp;
  &nbsp;
  &nbsp;
  template&lt;class U>
  friend class C&lt;U>::Nested; // ill-formed
};
</pre></td><td><pre>
template&lt;class... Ts>
struct VS {
  template&lt;class... Us>
  friend Us...; // ill-formed
  &nbsp;
  template&lt;class... Us>
  friend class Us...; // ill-formed
  &nbsp;
  template&lt;class U>
  friend class C&lt;Ts>::Nested&lt;U>...; // ill-formed
  &nbsp;
  template&lt;class... Us>
  friend class C&lt;Ts...>::Nested&lt;Us>...; // ill-formed
  &nbsp;
  template&lt;class... Us>
  friend class C&lt;Us>::Nested...; // ill-formed
};
</pre></td></tr>
</table>

On the other hand, this usage (to befriend the member template `C<T>::Nested`) is well-formed,
and remains well-formed after replacing today's `T` with tomorrow's `Ts...`:

<table>
<tr><th>Before</th><th>After</th></tr>
<tr><td><pre>
template&lt;class T>
struct C {
  template&lt;class U> struct Nested;
};
&nbsp;
template&lt;class T>
struct S {
  template&lt;class U>
  friend class C&lt;T>::Nested; // OK
};
&nbsp;
template&lt;class T>
template&lt;class U>
struct C&lt;T>::Nested {
  int m(S&lt;int>& s) { return s.private_; }
};
&nbsp;
int main() {
  S&lt;int> s;
  C&lt;int>::Nested&lt;float>().m(s); // OK
  &nbsp;
  C&lt;float>::Nested&lt;float>().m(s);
    // error, inaccessible
}
</pre></td><td><pre>
template&lt;class T>
struct C {
  template&lt;class U> struct Nested;
};
&nbsp;
template&lt;class... Ts>
struct VS {
  template&lt;class U>
  friend class C&lt;Ts>::Nested...; // OK
};
&nbsp;
template&lt;class T>
template&lt;class U>
struct C&lt;T>::Nested {
  int m(VS&lt;int, char>& vs) { return vs.private_; }
};
&nbsp;
int main() {
  VS&lt;int, char> vs;
  C&lt;int>::Nested&lt;float>().m(vs); // OK
  C&lt;char>::Nested&lt;float>().m(vs); // OK
  C&lt;float>::Nested&lt;float>().m(vs);
    // error, inaccessible
}
</pre></td></tr>
</table>


## `friend class Ts...` ## {#confusing-elab}

C++ already disallows `friend class T` when it stands alone ([Godbolt](https://godbolt.org/z/zMefooj6h)):
<table>
<tr><th>Before</th><th>After</th></tr>
<tr><td><pre>
template&lt;class T>
struct S {
  friend class T; // Error
};
</pre></td><td><pre>
template&lt;class... Ts>
struct S {
  friend class Ts...; // Error
};
</pre></td></tr>
</table>
but permits these ways to befriend a specific class instantiated from a class template `C`,
or to befriend a member class template:
<table>
<tr><th>Before</th><th>After</th></tr>
<tr><td><pre>
template&lt;class T>
struct S {
  friend class C&lt;T>;
  friend class N::C&lt;T>;
};
</pre></td><td><pre>
template&lt;class... Ts>
struct S {
  friend class C&lt;Ts>...;
  friend class N::C&lt;Ts>...;
};
</pre></td></tr>
<tr><td><pre>
template&lt;class T>
struct S {
  template&lt;class U>
  friend class C&lt;T>::Nested;
};
</pre></td><td><pre>
template&lt;class... Ts>
struct S {
  template&lt;class U>
  friend class C&lt;Ts>::Nested...;
};
</pre></td></tr>
</table>

The existing wording for this is in <a href="https://eel.is/c++draft/dcl.type.elab#4">[dcl.type.elab]/4</a>, which we modify
<a href="#wording1-dcl.type.elab">below</a> by adding an <ins>`...`<sub><i>opt</i></sub></ins>.


# Proposed wording # {#wording}

We present two possible wording options: our preferred way, and an alternative for comparison.

<table>
<tr><th>Option 1</th><th>Option 2</th></tr>
<tr><td>`friend Ts...` expands to `friend T1, T2`</td><td>`friend Ts...` expands to `friend T1; friend T2`</td></tr>
<tr><td>`friend T1, T2;` is OK</td><td>`friend T1, T2;` remains ill-formed</td></tr>
<tr><td>Consistent with `using T1::T1, T2::T2;`</td><td>â€”</td></tr>
<tr><td>Does the work up front</td><td>We expect future proposals for `friend T1, T2;` anyway</td></tr>
<tr><td>Adds <i>friend-type-declaration</i></td><td>Adds no new nonterminals</td></tr>
<tr><td>Fails to disentangle the whole `friend` grammar</td><td>Doesn't even <i>try</i> to disentangle the `friend` grammar</td></tr>
<tr><td>Wording seems OK</td><td>Wording apparently permits `void f(int... ...xs);` and `sizeof(int...)`</td>
<tr><td><b>We prefer Option 1.</b></td><td>Provided for comparison only.</td></tr>
</table>

P2893R0 presented Option 1, but with incomplete wording. At Kona, EWG was concerned
that the wording for `friend T1, T2` might be difficult, and so the presentation
drifted toward Option 2. But, having investigated Option 2, we think it's really about
as hard, and has the drawbacks above. We show it here for comparison, so that when
you ask "Why not just do [basically Option 2]?" we can point to it and say
"Look. We tried. It's no better."

Relevant paragraphs not modified here include:

- <a href="https://eel.is/c++draft/dcl.meaning.general#2">[dcl.meaning.general]/2</a> "If the declaration is a friend declaration, the declarator does not bind a name..."
- <a href="https://eel.is/c++draft/temp.friend">[temp.friend]</a> "A friend template may be declared within a class or class template ... A friend template shall not be declared in a local class ..."

## Option 1 (preferred) ## {#wording1}

Note: Precedent for "If a *member-declaration* matches..." is found in
<a href="https://eel.is/c++draft/dcl.pre#10">[dcl.pre]/10</a> "If a *static-assert-message* matches..."

Note: CWG discussion in Kona ([minutes](https://wiki.edg.com/bin/view/Wg21kona2023/CoreWorkingGroup#P2893R1))
suggested that *friend-type-specifier* shouldn't be producible from
*elaborated-type-specifier*, because then we'd appear to support `friend class A, class B;`.
However, as shown above, we need to support `template<class> friend class Ts::Nested...;` which
means that *friend-type-specifier* must be producible from *elaborated-type-specifier*.
Luckily <a href="#wording1-dcl.type.elab">[dcl.type.elab]/4</a> already forbids `friend class A, class B;`.
We add <ins>`...`<sub><i>opt</i></sub></ins> to [dcl.type.elab]/4 but don't add anything to permit commas.

Note: Today `friend typename X<T>::Y;` is legal, as is `friend X<T>::Y;`. The identifier there is in
a type-only context (<a href="#wording1-temp.res.general">[temp.res.general]</a>)
because it's a *decl-specifier* of the *decl-specifier-seq* of a *member-declaration*.
After our patch, it's in a type-only context because it's the *friend-type-specifier* of a *friend-type-declaration*.

Note: To befriend a non-template, you use a "friend declaration" which is a *member-declaration*.
To befriend a template, you use a *template-declaration*, which consists of a *template-head*
followed by a *declaration*; the "friend declaration" here is the *declaration* (<a href="#wording1-class.friend">[class.friend]/3</a>).
Therefore, *friend-type-declaration* must appear in the list
of alternatives for both <i><a href="#wording1-class.mem.general">member-declaration</a></i> and <i><a href="#wording1-dcl.pre">declaration</a></i>.
Friend declarations are already forbidden to appear outside of classes, although that wording is
elusive (maybe it doesn't exist).

### [cpp.predefined] ### {#wording1-cpp.predefined}

Add a feature-test macro to the table in
<a href="https://eel.is/c++draft/cpp.predefined#tab:cpp.predefined.ft">[cpp.predefined]</a>:

<small><blockquote>
<pre>
__cpp_variable_templates  201304L
<ins>__cpp_variadic_friend     YYYYMML</ins>
__cpp_variadic_templates  200704L
__cpp_variadic_using      201611L
</pre>
</blockquote></small>

### [class.mem.general] ### {#wording1-class.mem.general}

Modify <a href="https://eel.is/c++draft/class.mem.general#nt:member-declaration">[class.mem.general]</a> as follows:

<small><blockquote>
<i>member-declaration</i>:<br>
&emsp; <i>attribute-specifier-seq</i><sub>opt</sub> <i>decl-specifier-seq</i><sub>opt</sub> <i>member-declarator-list</i><sub>opt</sub> `;`<br>
&emsp; <i>function-definition</i><br>
&emsp; <ins><i>friend-type-declaration</i></ins><br>
&emsp; <i>using-declaration</i><br>
&emsp; <i>using-enum-declaration</i><br>
&emsp; <i>static_assert-declaration</i><br>
&emsp; <i>template-declaration</i><br>
&emsp; <i>explicit-specialization</i><br>
&emsp; <i>deduction-guide</i><br>
&emsp; <i>alias-declaration</i><br>
&emsp; <i>opaque-enum-declaration</i><br>
&emsp; <i>empty-declaration</i><br>

<ins><i>friend-type-declaration</i>:</ins><br>
&emsp; <ins>`friend` <i>friend-type-specifier-list</i> `;`</ins><br>
<ins><i>friend-type-specifier-list</i>:</ins><br>
&emsp; <ins><i>friend-type-specifier</i> `...`<sub>opt</sub></ins><br>
&emsp; <ins><i>friend-type-specifier-list</i> `,` <i>friend-type-specifier</i> `...`<sub>opt</sub></ins><br>
<ins><i>friend-type-specifier</i>:</ins><br>
&emsp; <ins><i>simple-type-specifier</i></ins><br>
&emsp; <ins><i>elaborated-type-specifier</i></ins><br>
&emsp; <ins><i>typename-specifier</i></ins><br>

<i>member-declarator-list</i>:<br>
&emsp; <i>member-declarator</i><br>
&emsp; <i>member-declarator-list</i> `,` <i>member-declarator</i><br>

[...]

<p>2. A *member-declaration* does not declare new members of the class if it is
- a friend declaration ([class.friend]),
- a *deduction-guide* ([temp.deduct.guide]),
- a *template-declaration* whose declaration is one of the above,
- a *static_assert-declaration*,
- a *using-declaration* ([namespace.udecl]), or
- an *empty-declaration*.

<p>For any other *member-declaration*, each declared entity that is not an unnamed bit-field
is a member of the class, and each such *member-declaration* shall either
declare at least one member name of the class or declare at least one unnamed bit-field.
<p>[...]
<p>8. A class `C` is complete at a program point *P* if the definition of `C` is reachable from *P* ([module.reach])
or if *P* is in a complete-class context of `C`. Otherwise, `C` is incomplete at *P*.

<p><ins>x. If a *member-declaration* matches the syntactic requirements of *friend-type-declaration*, it is a *friend-type-declaration*.</ins>

<p>9. In a *member-declarator*, an `=` immediately following the *declarator* is interpreted as
introducing a *pure-specifier* if the *declarator-id* has function type;
otherwise it is interpreted as introducing a *brace-or-equal-initializer*. [...]

<p>10. In a *member-declarator* for a bit-field, the *constant-expression* is parsed as
the longest sequence of tokens that could syntactically form a *constant-expression*. [...]
</blockquote></small>

### [dcl.pre] ### {#wording1-dcl.pre}

Modify <a href="https://eel.is/c++draft/dcl.pre">[dcl.pre]</a> as follows:

<small><blockquote>
<p>1. Declarations generally specify how names are to be interpreted. Declarations have the form

<i>declaration-seq</i>:<br>
&emsp; <i>declaration</i><br>
&emsp; <i>declaration-seq declaration</i><br>

<i>declaration</i>:<br>
&emsp; <i>name-declaration</i><br>
&emsp; <i>special-declaration</i><br>

<i>name-declaration</i>:<br>
&emsp; <i>block-declaration</i><br>
&emsp; <i>nodeclspec-function-declaration</i><br>
&emsp; <i>function-definition</i><br>
&emsp; <ins><i><a href="#wording1-class.mem.general">friend-type-declaration</a></i></ins><br>
&emsp; <i>template-declaration</i><br>
&emsp; <i>deduction-guide</i><br>
&emsp; <i>linkage-specification</i><br>
&emsp; <i>namespace-definition</i><br>
&emsp; <i>empty-declaration</i><br>
&emsp; <i>attribute-declaration</i><br>
&emsp; <i>module-import-declaration</i><br>

<i>special-declaration</i>:<br>
&emsp; <i>explicit-instantiation</i><br>
&emsp; <i>explicit-specialization</i><br>
&emsp; <i>export-declaration</i><br>

[...]

<p>2. Certain declarations contain one or more scopes ([basic.scope.scope]). Unless otherwise stated,
utterances in [dcl.dcl] about components in, of, or contained by a declaration or subcomponent thereof
refer only to those components of the declaration that are not nested within scopes nested within the declaration.

<p><ins>x. If a *declaration* matches the syntactic requirements of *friend-type-declaration*, it is a *friend-type-declaration*.</ins>

<p>3. A *simple-declaration* or *nodeclspec-function-declaration* of the form [...]
</blockquote></small>

### [temp.pre] ### {#wording1-temp.pre}

Modify <a href="https://eel.is/c++draft/temp.pre">[temp.pre]</a> as follows:

<small><blockquote>
<p>1. A *template* defines a family of classes, functions, or variables, an alias for a family of types, or a concept.

<i>template-declaration</i>:<br>
&emsp; <i>template-head declaration</i><br>
&emsp; <i>template-head concept-definition</i>

[...]

<p>2. The *declaration* in a *template-declaration* (if any) shall

- declare or define a function, a class, or a variable, or
- define a member function, a member class, a member enumeration, or a static data member of a class template or of a class nested within a class template, or
- define a member template of a class or class template, or
- <ins>be a <i><a href="#wording1-class.mem.general">friend-type-declaration</a></i>, or</ins>
- be a *deduction-guide*, or
- be an *alias-declaration*.

</blockquote></small>

### [class.friend] ### {#wording1-class.friend}

Modify <a href="https://eel.is/c++draft/class.friend">[class.friend]</a> as follows:

<small><blockquote>
<p>3. A friend declaration that does not declare a function shall <ins>be
a <i><a href="#wording1-class.mem.general">friend-type-declaration</a></i>.</ins> <del>have one of the following forms:</del>

&emsp; <del>`friend` *elaborated-type-specifier* `;`</del><br>
&emsp; <del>`friend` *simple-type-specifier* `;`</del><br>
&emsp; <del>`friend` *typename-specifier* `;`</del><br>

[*Note:*â€‚A friend declaration can be the *declaration* in a *template-declaration* (<a href="#wording1-temp.pre">[temp.pre]</a>, [temp.friend]). â€” *end note*]

<del>If the type specifier in a friend declaration designates a (possibly cv-qualified) class type,
that class is declared as a friend; otherwise, the friend declaration is ignored.</del> <ins>Each
<i><a href="#wording1-class.mem.general">friend-type-specifier</a></i>
in a *friend-type-declaration* that designates a (possibly cv-qualified) class type declares
that class as a friend. Each other *friend-type-specifier* is ignored.</ins>

[*Example 4:*
<pre>
class C;
typedef C Ct;
<ins>struct E;</ins>

class X1 {
  friend C;                     // OK, class C is a friend
};

class X2 {
  friend Ct;                    // OK, class C is a friend
  friend D;                     // error: D not found
  friend class D;               // OK, elaborated-type-specifier declares new class
};

template &lt;class<ins>...</ins> T<ins>s</ins>> class R {
  friend T<ins>s...</ins>;
};

<ins>template &lt;class... Ts, class... Us></ins>
<ins>class R&lt;R&lt;Ts...>, R&lt;Us...>> {</ins>
<ins>  friend Ts::Nested..., Us...;</ins>
<ins>};</ins>

R&lt;C> rc;                        // class C is a friend of R&lt;C>
<ins>R&lt;C, E> rce;                    // classes C and E are friends of R&lt;C, E></ins>
R&lt;int> Ri;                      // OK, "friend int;" is ignored

<ins>struct E { struct Nested; };</ins>

<ins>R&lt;R&lt;E>, R&lt;C, int>> rr;    // E::Nested and C are friends of R&lt;R&lt;E>, R&lt;C, int>></ins>
</pre>
â€” *end example*]
</blockquote></small>

### [dcl.type.elab] ### {#wording1-dcl.type.elab}

Modify <a href="https://eel.is/c++draft/dcl.type.elab#4">[dcl.type.elab]</a> as follows:

<small><blockquote>
<p>4. <del>If an *elaborated-type-specifier* appears with the `friend` specifier
as an entire *member-declaration*, the *member-declaration* shall</del> <ins>If any
<i><a href="#wording1-class.mem.general">friend-type-specifier</a></i> in a
<i><a href="#wording1-class.mem.general">friend-type-declaration</a></i>
is an *elaborated-type-specifier*, the *friend-type-declaration* shall</ins> have one of the following forms:

- `friend` *class-key nested-name-specifier*<sub>opt</sub> *identifier* <ins>`...`<sub><i>opt</i></sub></ins> `;`
- `friend` *class-key simple-template-id* <ins>`...`<sub><i>opt</i></sub></ins> `;`
- `friend` *class-key nested-name-specifier* `template`<sub>opt</sub> *simple-template-id* <ins>`...`<sub><i>opt</i></sub></ins> `;`

Any unqualified lookup for the *identifier* (in the first case) does not consider scopes that contain the target scope; no name is bound.
<p>[*Note:*â€‚A using-directive in the target scope is ignored if it refers to a namespace not contained by that scope.
[basic.lookup.elab] describes how name lookup proceeds in an elaborated-type-specifier. â€” *end note*]
<p>[*Note:*â€‚An *elaborated-type-specifier* can be used to refer to a previously declared *class-name* or *enum-name*
even if the name has been hidden by a non-type declaration. â€” *end note*]

<p>5. If the *identifier* or *simple-template-id* resolves to a *class-name* or *enum-name*, the *elaborated-type-specifier* introduces it
into the declaration the same way a *simple-type-specifier* introduces its *type-name* ([dcl.type.simple]).
If the *identifier* or *simple-template-id* resolves to a *typedef-name* ([dcl.typedef], [temp.names]), the *elaborated-type-specifier* is ill-formed.
<p>[*Note:*â€‚This implies that, within a class template with a template *type-parameter* `T`, the declaration
`friend class T;` is ill-formed. However, the similar declaration `friend T;` is well-formed ([class.friend]). â€” *end note*]
</blockquote></small>

### [temp.res.general] ### {#wording1-temp.res.general}

Modify <a href="https://eel.is/c++draft/temp.res.general">[temp.res.general]</a> as follows:

<small><blockquote>
<p>4. A qualified or unqualified name is said to be in a *type-only context* if it is the terminal name of

* a *typename-specifier*, *nested-name-specifier*, *elaborated-type-specifier*, *class-or-decltype*, or
* <ins>the *simple-type-specifier* of a <i><a href="#wording1-class.mem.general">friend-type-specifier</a></i>, or</ins>
* a *type-specifier* of a
    - *new-type-id*,
    - *defining-type-id*,
    - *conversion-type-id*,
    - *trailing-return-type*,
    - default argument of a *type-parameter*, or
    - *type-id* of a `static_cast`, `const_cast`, `reinterpret_cast`, or `dynamic_cast`, or
* a *decl-specifier* of the *decl-specifier-seq* of a
    - *simple-declaration* or *function-definition* in namespace scope,
    - *member-declaration*,
    - *parameter-declaration* in a *member-declaration*, unless that *parameter-declaration* appears in a default argument,
    - *parameter-declaration* in a declarator of a function or function template declaration whose *declarator-id* is qualified, unless that *parameter-declaration* appears in a default argument,
    - *parameter-declaration* in a *lambda-declarator* or *requirement-parameter-list*, unless that *parameter-declaration* appears in a default argument, or
    - *parameter-declaration* of a (non-type) *template-parameter*.

</blockquote></small>

### [temp.variadic] ### {#wording1-temp.variadic}

Modify <a href="https://eel.is/c++draft/temp.variadic">[temp.variadic]</a> as follows:

<small><blockquote>
<p>5. A *pack expansion* consists of a *pattern* and an *ellipsis*, the instantiation of which produces
zero or more instantiations of the pattern in a list (described below). The form of the pattern depends
on the context in which the expansion occurs. Pack expansions can occur in the following contexts:

* In a function parameter pack ([dcl.fct]); the pattern is the *parameter-declaration* without the ellipsis.
* In a *using-declaration* ([namespace.udecl]); the pattern is a *using-declarator*.
* <ins>In a *friend-type-declaration* (<a href="#wording1-class.mem.general">[class.mem.general]</a>); the pattern is a *friend-type-specifier*.</ins>
* In a template parameter pack that is a pack expansion ([temp.param]):
  - if the template parameter pack is a *parameter-declaration*; the pattern is the *parameter-declaration* without the ellipsis;
  - if the template parameter pack is a *type-parameter*; the pattern is the corresponding *type-parameter* without the ellipsis.
* In an *initializer-list* ([dcl.init]); the pattern is an *initializer-clause*.
* In a *base-specifier-list* ([class.derived]); the pattern is a *base-specifier*.
* In a *mem-initializer-list* ([class.base.init]) for a *mem-initializer* whose *mem-initializer-id* denotes a base class; the pattern is the *mem-initializer*.
* In a *template-argument-list* ([temp.arg]); the pattern is a *template-argument*.
* In an *attribute-list* ([dcl.attr.grammar]); the pattern is an *attribute*.
* In an *alignment-specifier* ([dcl.align]); the pattern is the *alignment-specifier* without the ellipsis.
* In a *capture-list* ([expr.prim.lambda.capture]); the pattern is the *capture* without the ellipsis.
* In a `sizeof...` expression; the pattern is an *identifier*.
* In a *fold-expression* ([expr.prim.fold]); the pattern is the *cast-expression* that contains an unexpanded pack.

</blockquote></small>

## Option 2 ## {#wording2}

Note: The idea that a pack-expansion can produce a semicolon-separated "sequence of declarations"
is not a problem, but it is novel.

Note: We need to permit `friend Ts...;` and `friend typename Ts::Nested...;`, but while keeping `friend int... fs();`
and `inline int... xs;` clearly ill-formed. This wording probably achieves the former, but
without much regard for the latter.
Today, `friend T;` is a <i><a href="https://eel.is/c++draft/dcl.pre#nt:simple-declaration">simple-declaration</a></i>,
consisting of two *decl-specifiers* and no *init-declarator-list*. The second *decl-specifier*
is a *defining-type-specifier* which is a *simple-type-specifier*.

Note: The identifier in `friend Ts::Nested...;` is in a type-only context because
it is a *decl-specifier* of the *decl-specifier-seq* of a *member-declaration*. Therefore Option 2 can omit
Option 1's patch to <a href="#wording1-temp.res.general">[temp.res.general]</a>.

### [cpp.predefined] ### {#wording2-cpp.predefined}

Add a feature-test macro to the table in
<a href="https://eel.is/c++draft/cpp.predefined#tab:cpp.predefined.ft">[cpp.predefined]</a>:

<small><blockquote>
<pre>
__cpp_variable_templates  201304L
<ins>__cpp_variadic_friend     YYYYMML</ins>
__cpp_variadic_templates  200704L
__cpp_variadic_using      201611L
</pre>
</blockquote></small>

### [dcl.type.elab] ### {#wording2-dcl.type.elab}

Modify <a href="https://eel.is/c++draft/dcl.type.elab#4">[dcl.type.elab]</a> as follows:

<small><blockquote>
<p>4. If an *elaborated-type-specifier* appears with the `friend` specifier as an entire *member-declaration*,
the *member-declaration* shall have one of the following forms:

- `friend` *class-key nested-name-specifier*<sub>opt</sub> *identifier* <ins>`...`<sub><i>opt</i></sub></ins> `;`
- `friend` *class-key simple-template-id* <ins>`...`<sub><i>opt</i></sub></ins> `;`
- `friend` *class-key nested-name-specifier* `template`<sub>opt</sub> *simple-template-id* <ins>`...`<sub><i>opt</i></sub></ins> `;`

Any unqualified lookup for the *identifier* (in the first case) does not consider scopes that contain the target scope; no name is bound.
<p>[*Note:*â€‚A using-directive in the target scope is ignored if it refers to a namespace not contained by that scope.
[basic.lookup.elab] describes how name lookup proceeds in an elaborated-type-specifier. â€” *end note*]
<p>[*Note:*â€‚An *elaborated-type-specifier* can be used to refer to a previously declared *class-name* or *enum-name*
even if the name has been hidden by a non-type declaration. â€” *end note*]

<p>5. If the *identifier* or *simple-template-id* resolves to a *class-name* or *enum-name*, the *elaborated-type-specifier* introduces it
into the declaration the same way a *simple-type-specifier* introduces its *type-name* ([dcl.type.simple]).
If the *identifier* or *simple-template-id* resolves to a *typedef-name* ([dcl.typedef], [temp.names]), the *elaborated-type-specifier* is ill-formed.
<p>[*Note:*â€‚This implies that, within a class template with a template *type-parameter* `T`, the declaration
`friend class T;` is ill-formed. However, the similar declaration `friend T;` is well-formed ([class.friend]). â€” *end note*]
</blockquote></small>

### [dcl.type.general] ### {#wording2-dcl.type.general}

Modify <a href="https://eel.is/c++draft/dcl.type.general">[dcl.type.general]</a> as follows:

<small><blockquote>
<p>1. The type-specifiers are

<i>type-specifier</i>:<br>
&emsp; <i>simple-type-specifier</i> <ins>`...`<sub>opt</sub></ins><br>
&emsp; <i>elaborated-type-specifier</i> <ins>`...`<sub>opt</sub></ins><br>
&emsp; <i>typename-specifier</i> <ins>`...`<sub>opt</sub></ins><br>
&emsp; <i>cv-qualifier</i><br>

<i>type-specifier-seq</i>:<br>
&emsp; <i>type-specifier attribute-specifier-seq</i><sub>opt</sub><br>
&emsp; <i>type-specifier type-specifier-seq</i><br>

<i>defining-type-specifier</i>:<br>
&emsp; <i>type-specifier</i><br>
&emsp; <i>class-specifier</i><br>
&emsp; <i>enum-specifier</i><br>

[...]
</blockquote></small>

### [class.friend] ### {#wording2-class.friend}

Modify <a href="https://eel.is/c++draft/class.friend">[class.friend]</a> as follows:

<small><blockquote>
<p>3. A friend declaration that does not declare a function shall have
one of the following forms:

&emsp; `friend` *elaborated-type-specifier* <ins>`...`<sub>opt</sub></ins> `;`<br>
&emsp; `friend` *simple-type-specifier* <ins>`...`<sub>opt</sub></ins> `;`<br>
&emsp; `friend` *typename-specifier* <ins>`...`<sub>opt</sub></ins> `;`<br>

[*Note:*â€‚A friend declaration can be the declaration in a *template-declaration* ([temp.pre], [temp.friend]). â€” *end note*]

<del>If the type specifier in a friend declaration designates a (possibly cv-qualified) class type,
that class is declared as a friend; otherwise, the friend declaration is ignored.</del> <ins>Each
type specifier in such a friend declaration that designates a (possibly cv-qualified) class type
declares that class as a friend;
each type specifier that does not designate a (possibly cv-qualified) class type is ignored.</ins>

[*Example 4:*
<pre>
class C;
typedef C Ct;
<ins>struct E;</ins>

class X1 {
  friend C;                     // OK, class C is a friend
};

class X2 {
  friend Ct;                    // OK, class C is a friend
  friend D;                     // error: D not found
  friend class D;               // OK, elaborated-type-specifier declares new class
};

template &lt;class<ins>...</ins> T<ins>s</ins>> class R {
  friend T<ins>s...</ins>;
};

<ins>template &lt;class... Ts, class... Us></ins>
<ins>class R&lt;R&lt;Ts...>, R&lt;Us...>> {</ins>
<ins>  friend Ts::Nested...;</ins>
<ins>  friend Us...;</ins>
<ins>};</ins>

R&lt;C> rc;                        // class C is a friend of R&lt;C>
<ins>R&lt;C, E> rce;                    // classes C and E are friends of R&lt;C, E></ins>
R&lt;int> Ri;                      // OK, "friend int;" is ignored

<ins>struct E { struct Nested; };</ins>

<ins>R&lt;R&lt;E>, R&lt;C, int>> rr;    // E::Nested and C are friends of R&lt;R&lt;E>, R&lt;C, int>></ins>
</pre>
â€” *end example*]
</blockquote></small>

### [temp.variadic] ### {#wording2-temp.variadic}

Modify <a href="https://eel.is/c++draft/temp.variadic">[temp.variadic]</a> as follows:

<small><blockquote>
<p>5. A *pack expansion* consists of a *pattern* and an *ellipsis*, the instantiation of which produces
zero or more instantiations of the pattern in a list (described below). The form of the pattern depends
on the context in which the expansion occurs. Pack expansions can occur in the following contexts:

* In a function parameter pack ([dcl.fct]); the pattern is the *parameter-declaration* without the ellipsis.
* In a *using-declaration* ([namespace.udecl]); the pattern is a *using-declarator*.
* <ins>In a friend declaration (<a href="#wording1-class.mem.general">[class.mem.general]</a>); the pattern is a *type-specifier*.</ins>
* In a template parameter pack that is a pack expansion ([temp.param]):
  - if the template parameter pack is a *parameter-declaration*; the pattern is the *parameter-declaration* without the ellipsis;
  - if the template parameter pack is a *type-parameter*; the pattern is the corresponding *type-parameter* without the ellipsis.
* In an *initializer-list* ([dcl.init]); the pattern is an *initializer-clause*.
* In a *base-specifier-list* ([class.derived]); the pattern is a *base-specifier*.
* In a *mem-initializer-list* ([class.base.init]) for a *mem-initializer* whose *mem-initializer-id* denotes a base class; the pattern is the *mem-initializer*.
* In a *template-argument-list* ([temp.arg]); the pattern is a *template-argument*.
* In an *attribute-list* ([dcl.attr.grammar]); the pattern is an *attribute*.
* In an *alignment-specifier* ([dcl.align]); the pattern is the *alignment-specifier* without the ellipsis.
* In a *capture-list* ([expr.prim.lambda.capture]); the pattern is the *capture* without the ellipsis.
* In a `sizeof...` expression; the pattern is an *identifier*.
* In a *fold-expression* ([expr.prim.fold]); the pattern is the *cast-expression* that contains an unexpanded pack.

[...]

<p>9. The instantiation of a `sizeof...` expression ([expr.sizeof]) produces an integral constant with value *N*.
<p>10. The instantiation of an *alignment-specifier* with an ellipsis produces `E`<sub>1</sub>`E`<sub>2</sub>...`E`<sub>N</sub>.
<p>11. The instantiation of a *fold-expression* ([expr.prim.fold]) produces:

* `( (( E`<sub>1</sub> <i>op</i> `E`<sub>2</sub>`)` <i>op</i> ... `)` <i>op</i> `E`<sub>N</sub>`)` for a unary left fold,
* `(E`<sub>1</sub> <i>op</i> `(` ... <i>op</i> `(E`<sub>N-1</sub> <i>op</i> `E`<sub>N</sub>`)) )` for a unary right fold,
* `( (((E` <i>op</i> `E`<sub>1</sub>`)` <i>op</i> `E`<sub>2</sub> `)` <i>op</i> ... `)` <i>op</i> `E`<sub>N</sub> `)` for a binary left fold, and
* `(E`<sub>1</sub> <i>op</i> `(` ... <i>op</i> `(E`<sub>N-1</sub> <i>op</i> `(E`<sub>N</sub> <i>op</i> `E))) )` for a binary right fold. [...]

<p><ins>x. The instantiation of a friend declaration (<a href="#wording2-class.friend">[class.friend]</a>) produces a sequence of declarations
`friend E`<sub>1</sub>`;` `friend E`<sub>2</sub>`;` ... `friend E`<sub>N</sub>`;`.</ins>
<p>12. The instantiation of any other pack expansion produces a list of elements `E`<sub>1</sub>`,E`<sub>2</sub>`,` ... `,E`<sub>N</sub>.
[*Note:*â€‚The variety of list varies with the context: *expression-list*, *base-specifier-list*, *template-argument-list*, etc. â€” *end note*]
When *N* is zero, the instantiation of the expansion produces an empty list.
</blockquote></small>


# Acknowledgments # {#acknowledgments}

I had been sitting on this since posting to the mailing list about it in January 2020. This paper was finally
written during C++Now 2023, Feature in a Week. Thus, it is very appropriate to say that it would not exist
without that program. Thanks to Jeff Garland, Marshall Clow, Barry Revzin, and JF Bastien for running that
program, and all the attendees who helped discuss and review the proposal. Special thanks to Barry Revzin for
lots of help with the document itself.

Thanks to Brian Bi and Krystian Stasiowski for further review of the R1 wording.
