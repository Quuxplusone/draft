<pre class='metadata'>
Title: Static storage for braced initializers
Shortname: D2752
Revision: 1
!Draft Revision: 6
Audience: EWG
Status: D
Group: WG21
URL:
!Current Source: <a href="https://github.com/Quuxplusone/draft/blob/gh-pages/d2752-static-storage-for-braced-initializers.bs">github.com/Quuxplusone/draft/blob/gh-pages/d2752-static-storage-for-braced-initializers.bs</a>
!Current: <a href="https://rawgit.com/Quuxplusone/draft/gh-pages/d2752-static-storage-for-braced-initializers.html">rawgit.com/Quuxplusone/draft/gh-pages/d2752-static-storage-for-braced-initializers.html</a>
Editor: Arthur O'Dwyer, arthur.j.odwyer@gmail.com
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract:
  Initializing a vector from a <i>braced-initializer-list</i> like <code>{1,2,3}</code>
  copies the data from static storage to a backing array on the stack,
  and thence into the vector. This wastes CPU cycles, but more importantly, it wastes stack space.
  We propose to eliminate the waste by permitting a <code>std::initializer_list&lt;T&gt;</code>'s
  backing array to exist in static storage.
Date: 2023-01-09
</pre>

<style>
hilite  {background-color: #FFFF00; font-weight: bold;}
ins  {background-color: #CCFFCC; text-decoration: underline;}
del  {background-color: #FFCACA; text-decoration: line-through;}
</style>

# Changelog # {#changelog}

- R0:

    - Initial draft.


# Background # {#background}

<a href="https://eel.is/c++draft/dcl.init.list#5">[dcl.init.list]/5–6</a> says:

<blockquote>
An object of type `std::initializer_list<E>` is constructed from an initializer list
as if the implementation generated and materialized a prvalue of type “array of *N* `const E`”,
where *N* is the number of elements in the initializer list. Each element of that array
is copy-initialized with the corresponding element of the initializer list,
and the `std::initializer_list<E>` object is constructed to refer to that array.

[<i>Example 12:</i><small><pre>
    struct X {
      X(std::initializer_list&lt;double&gt; v);
    };
    X x{ 1,2,3 };
</pre></small> The initialization will be implemented in a way roughly equivalent to this: <small><pre>
    const double __a[3] = {double{1}, double{2}, double{3}};
    X x(std::initializer_list&lt;double&gt;(__a, __a+3));
</pre></small> assuming that the implementation can construct an `initializer_list` object with a pair of pointers.
<i>—end example</i>] [...]

<b>[<i>Note 6: The implementation is free to allocate the array in read-only memory
if an explicit array with the same initializer can be so allocated. —end note</i>]</b>
</blockquote>

In December 2022, Jason Merrill observed ([[CoreReflector]]) that this note isn't saying much.
Consider the following translation unit:

```c++
    void f(std::initializer_list<int> il);

    void g() {
        f({1,2,3});
    }

    int main() { g(); }
```

Can the backing array for `{1,2,3}` be allocated in static storage?
No, because `f`'s implementation might look like this:

```c++
    void g();

    void f(std::initializer_list<int> il) {
        static const int *ptr = nullptr;
        if (ptr == nullptr) {
            ptr = il.begin();
            g();
        } else {
            assert(ptr != il.begin());
        }
    }
```

A conforming C++23 implementation must compile this code in such a way that the
two temporary backing arrays — the one pointed to by `il.begin()` during the first
recursive call to `f`, and the one pointed to by `il.begin()` during the second recursive call
to `f` — have distinct addresses, because that would also be true of "an explicit array [variable]"
in the scope of `g`.

All three of GCC, Clang, and MSVC compile this code in a conforming manner.
([Godbolt.](https://godbolt.org/z/KExEG4a6v))

Expert programmers tend to understand that when they write
```c++
    std::vector<int> v = {1,2,3,4,5,6,7,8,9,10};
```
they're getting a copy of the data from its original storage into the heap-allocated
STL container: obviously the data has to get from point A to point B somehow.
But even expert programmers are surprised to learn that there are actually *two*
copies happening here — one from static storage onto the stack, and another from
stack to heap!

Worse: [[P1967R9]] (adopted for C++26) allows programmers to write
```c++
    std::vector<char> v = {
        #embed "2mb-image.png"
    };
```
Suppose "2mb-image.png" contains 2MB of data. Then the function that initializes `v`
here will create a temporary backing array of size 2MB. That is, we're adding 2MB to
the stack frame of that function.
Suddenly your function's stack frame is 2MB larger than you expected!
And this applies even if the "function" in question is the compiler-generated
initialization routine for a dynamically initialized global variable `v`.
You might not even control the function whose stack frame is blowing up.

This kind of thing was always possible pre-P1967, but was hard to hit in human-generated code,
because braced initializer lists were generally short. But post-P1967, this is easy
to hit. I think this stack-frame blowup is going to become a well-known problem unless we solve it first.

## Workarounds ## {#workarounds}

This code creates a 2MB backing array on the stack frame of the function that initializes `v`:
```c++
    std::vector<char> v = {
        #embed "2mb-image.png"
    };
```
This code does not:
```c++
    static const char backing[] = {
        #embed "2mb-image.png"
    };
    std::vector<char> v = std::vector<char>(backing, std::end(backing));
```
So the latter is a workaround. But it shouldn't be necessary to work around this issue;
we should fix it instead.

JeanHeyd Meneide points out that C's "compound literals" have the same problem, and they
chose to permit the programmer to work around it in C23 by adding storage class annotations
directly to their literals, like this:
```c++
    int f(const int *p);
    int x = f((static const int[]){ // C23 syntax
        #embed "2mb-image.png"
    });
```
Zhihao Yuan's [[P2174R1]]
proposes adding C-compatible compound literals to C++, but does not propose storage-class
annotations. Anyway, that's not a solution to the `std::initializer_list` problem, because `initializer_list`
syntax is lightweight by design. We don't need new syntax; we just need the existing syntax to
Do The Right Thing by default.


# Solution # {#solution}

Essentially we want the semantics of braced initializer lists to match the semantics
of string literals (<a href="https://timsong-cpp.github.io/cppwp/n4861/lex.string#9">[lex.string]/9</a>).

We want to encourage tomorrow's compilers to avoid taking up any stack space for
constant-initialized initializer lists. If possible I'd like to *mandate* they not take
any stack space, but I don't currently know how to specify that. Quality implementations
will take advantage of this permission anyway.
```c++
    std::initializer_list<int> i1 = {
        #embed "very-large-file.png"  // OK
    };

    void f2(std::initializer_list<int> ia,
            std::initializer_list<int> ib) {
        PERMIT(ia.begin() == ib.begin());
    }
    int main() {
        f2({1,2,3}, {1,2,3});
    }
```

We want to permit tomorrow's compilers to share backing arrays with elements in common, just like
today's compilers can share string literals. High-quality implementations might take advantage
of this permission, even though mainstream compilers probably won't bother.
```c++
    const char *p1 = "hello world";
    const char *p2 = "world";
    PERMIT(p2 == p1 + 6);  // today's behavior

    std::initializer_list<int> i1 = {1,2,3,4,5};
    std::initializer_list<int> i2 = {2,3,4};
    PERMIT(i1.begin() == i2.begin() + 1);  // tomorrow's proposed behavior
```

We even intend to permit tomorrow's compilers to share backing arrays between static
and dynamic initializer lists. It would take a really smart compiler to exploit this
new permission, but we have no reason to forbid it. For example:
```c++
    void f3(int argc, std::initializer_list<int> ia,
                      std::initializer_list<int> ib) {
        if (argc != 2) {
            assert(ia.begin() != ib.begin());
        } else {
            PERMIT(ia.begin() == ib.begin());
        }
    }
    int main(int argc, char **argv) {
        f3(argc, {1,2,3}, {1,argc,3});
    }
```

We do not intend to permit accessing a backing array outside of its lifetime,
even when it happens to be stored in static storage.
```c++
    const int *f4(std::initializer_list<int> i4) {
        return i4.begin();
    }
    int main() {
        const int *p = f4({1,2,3});
        std::cout << *p;  // still UB, not OK
    }
```

We do not intend to interfere with <a href="https://eel.is/c++draft/class.base.init#11">[class.base.init]/11</a>,
which makes it not just UB but actually ill-formed to bind a reference member to a temporary.
([CWG 1696](https://cplusplus.github.io/CWG/issues/1696.html), from 2014, seems to be related.
As of December 2022, Clang diagnoses this example; GCC doesn't; MSVC gives a possibly unrelated error message.)
```c++
    struct C5 {
        C5() : i5 {1,2,3} {}  // still ill-formed, not OK
        std::initializer_list<int> i5;
    };
```

We do not intend to permit tomorrow's compiler to defer or omit the side effects of
constructor or destructor calls involved with the creation of a backing array.
In practice, we expect compilers to "static-fy" backing arrays of
types that are trivially destructible, and not to "static-fy" anything else.
```c++
    struct C6 {
        constexpr C6(int i) {}
        ~C6() { printf(" X"); }
    };
    void f6(std::initializer_list<C6>) {}
    int main() {
        f6({1,2,3}); // must still print X X X
        f6({1,2,3}); // must still print X X X
    }
```

We do not intend to cause any new race conditions when `initializer_list` is
mixed with `thread_local`. Since the contents of a backing array are never
modified, I don't see any way that static-fying a backing array could interfere
with multithreading; but I mention it specifically here in case someone sees
a problem that I don't.
```c++
    void f7() {
        thread_local std::vector<int> v = {1,2,3};  // still OK
    }
```

We do not intend to describe backing arrays as "variables" or permit anything
new in terms of constexpr evaluation. For example, this code is ill-formed today
and will remain ill-formed tomorrow. Now, if it ever *became* legal, we'd have to
accept that it would be unspecified whether `c8a` and `c8b` had the same type or not.
But this is not new: the situation with `c8c` and `c8d` is exactly analogous.
```c++
    template<const char *P> struct C8 {};
    C8<std::begin({1,2,3})> c8a;  // still ill-formed, P must address a variable
    C8<std::begin({1,2,3})> c8b;  // still ill-formed, P must address a variable
    C8<"abc"> c8c;                // still ill-formed, P must address a variable
    C8<"abc"> c8d;                // still ill-formed, P must address a variable
```



# Implementation experience # {#experience}

I have an experimental patch against Clang trunk; see [[Patch]].
It is likely incomplete, and (as of this writing) certainly buggy; it has not received attention from anyone but myself.
You can experiment with it [on Godbolt Compiler Explorer](https://godbolt.org/z/cxvdWcKbd);
just use the P1144 branch of Clang, with the `-fstatic-init-lists` command-line switch.


## Implications for ABI vendors ## {#abi}

So that inline functions will agree on the names of their hidden backing-array variables,
I think it's possible that each ABI (Itanium, Microsoft) will have to agree on a mangling scheme
for those hidden variables, just as each ABI has agreed on manglings for the names of (1) guard variables
for thread-safe static initialization; (2) backing variables for structured bindings;
(3) lambda closure types. On the other hand, these static backing arrays behave very much
like string literals, which are implemented with non-external symbols and need no mangling;
so maybe there is no need for different TUs to agree on their names.
```c++
    template<class T> void escape(T);
    void escape(std::initializer_list<int>);
    inline void f(int i) {
        static int x = i; // guard variable _ZGVZ1fiE1x, ?$TSS0@?1??f@@YAXH@Z@4HA
        static auto [a,b] = std::make_pair(1,2); // backing variable _ZZ1fiEDC1a1bE, ?$S1@?1??f@@YAXH@Z@4U?$pair@HH@std@@A
        escape([]() { return 42; }); // lambda closure type Z1fiEUlvE_, V<lambda_1>@?1??f@@YAXH@Z@
        escape({1,2,3}); // backing array might need a mangling
        escape("abc"); // backing array needs no mangling
    }
```


# Proposed wording relative to the current C++23 draft # {#wording}

Thanks to Jens Maurer for reviewing this proposed wording.

Modify <a href="https://timsong-cpp.github.io/cppwp/n4861/dcl.init.list#5">[dcl.init.list]/5–6</a> as follows:

<blockquote>
An object of type `std::initializer_list<E>` is constructed from an initializer list
as if the implementation generated <del>and materialized a prvalue</del> <ins>an object</ins> of type “array of *N* `const E`”,
where *N* is the number of elements in the initializer list<ins>; this is called the initializer list's *backing array*</ins>.
Each element of <del>that array</del> <ins>the backing array</ins> is copy-initialized with the corresponding element of the initializer list,
and the `std::initializer_list<E>` object is constructed to refer to that array.

<p>
<del>[*Example 12:*</del>
<small><pre>
    <del>struct X {</del>
      <del>X(std::initializer_list&lt;double&gt; v);</del>
    <del>};</del>
    <del>X x{ 1,2,3 };</del>
</pre></small>
<del>The initialization will be implemented in a way roughly equivalent to this:</del>
<small><pre>
    <del>const double __a[3] = {double{1}, double{2}, double{3}};</del>
    <del>X x(std::initializer_list&lt;double&gt;(__a, __a+3));</del>
</pre></small>
<del>assuming that the implementation can construct an `initializer_list` object with a pair of pointers.
*—end example*]</del>

<p>
<ins>Whether two backing arrays with the same contents are distinct (that is,
are stored in nonoverlapping objects) is unspecified.</ins>

The <ins>backing</ins> array has the same lifetime as <del>any other</del> <ins>a</ins> temporary object, except that initializing
an `initializer_list` object from the array extends the lifetime of the array exactly like
binding a reference to a temporary.

<ins>[*Example 12:*</ins>
<small><pre>
    <ins>void f(std::initializer_list&lt;double&gt; il);</ins>
    <ins>void g(float x) {</ins>
      <ins>f({1, x, 3});</ins>
    <ins>}</ins>
    <ins>void h() {</ins>
      <ins>f({1, 2, 3});</ins>
    <ins>}</ins>
</pre></small>
<ins>The initialization will be implemented in a way roughly equivalent to this:</ins>
<small><pre>
    <ins>void g(float x) {</ins>
      <ins>const double __a[3] = {double{1}, double{x}, double{3}}; // backing array</ins>
      <ins>f(std::initializer_list&lt;double&gt;(__a, __a+3));</ins>
    <ins>}</ins>
    <ins>void h() {</ins>
      <ins>static constexpr double __b[3] = {double{1}, double{2}, double{3}}; // backing array</ins>
      <ins>f(std::initializer_list&lt;double&gt;(__b, __b+3));</ins>
    <ins>}</ins>
</pre></small>
<ins>assuming that the implementation can construct an `initializer_list` object with a pair of pointers.
*—end example*]</ins>

[*Example 13:*
<small><pre>
    typedef std::complex&lt;double> cmplx;
    std::vector&lt;cmplx> v1 = { 1, 2, 3 };
    void f() {
      std::vector&lt;cmplx> v2{ 1, 2, 3 };
      std::initializer_list&lt;int> i3 = { 1, 2, 3 };
    }
    struct A {
      std::initializer_list&lt;int> i4;
      A() : i4{ 1, 2, 3 } {}            // ill-formed, would create a dangling reference
    };
</pre></small>
For `v1` and `v2`, the `initializer_list` object is a parameter in a function call,
so the array created for `{ 1, 2, 3 }` has full-expression lifetime. For `i3`, the
`initializer_list` object is a variable, so the array persists for the lifetime of
the variable. For `i4`, the `initializer_list` object is initialized in the constructor's
<i>ctor-initializer</i> as if by binding a temporary array to a reference member, so the
program is ill-formed. *—end example*]

<p>
<del>[*Note 6: The implementation is free to allocate the array in read-only memory
if an explicit array with the same initializer can be so allocated. —end note*]</del>
</blockquote>


## Addition to Annex C ## {#wording-annexc}

We might want to add something to Annex C <a href="https://eel.is/c++draft/diff.cpp20.expr">[diff.cpp20.expr]</a>,
since technically this is a breaking change; but on the other hand we don't actually
expect anyone to notice. Their code should just silently get faster.


# Acknowledgments # {#acknowledgments}

- Thanks to Jason Merrill for the original issue, and to Andrew Tomazos for recommending Arthur write this paper.


<pre class=biblio>
{
  "CoreReflector": {
    "title": "[isocpp-core] initializer_list and read-only memory",
    "authors": [
      "Jason Merrill"
    ],
    "href": "https://lists.isocpp.org/core/2022/12/13625.php",
    "date": "December 2022"
  },
  "P1967R9": {
    "title": "#embed - a scannable, tooling-friendly binary resource inclusion mechanism",
    "authors": [
      "JeanHeyd Meneide"
    ],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p1967r9.html",
    "date": "October 2022"
  },
  "P2174R1": {
    "title": "Compound Literals",
    "authors": [
      "Zhihao Yuan"
    ],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2174r1.html",
    "date": "April 2022"
  },
  "Patch": {
    "title": "Implement P2752R0 Static storage for braced initializers",
    "authors": [
      "Arthur O'Dwyer"
    ],
    "href": "https://github.com/Quuxplusone/llvm-project/tree/p2752",
    "date": "January 2023"
  }
}
</pre>
