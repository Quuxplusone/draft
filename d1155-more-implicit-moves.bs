<pre class='metadata'>
Title: More implicit moves
Shortname: D1155
Revision: 3
!Draft Revision: 13
Audience: CWG
Status: D
Group: WG21
URL:
!Current Source: <a href="https://github.com/Quuxplusone/draft/blob/gh-pages/d1155-more-implicit-moves.bs">github.com/Quuxplusone/draft/blob/gh-pages/d1155-more-implicit-moves.bs</a>
!Current: <a href="https://rawgit.com/Quuxplusone/draft/gh-pages/d1155-more-implicit-moves.html">rawgit.com/Quuxplusone/draft/gh-pages/d1155-more-implicit-moves.html</a>
Editor: Arthur O'Dwyer, arthur.j.odwyer@gmail.com
Editor: David Stone, davidmstone@google.com
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract:
  Programmers expect <code>return x;</code> to trigger copy elision; or, at worst, to <i>implicitly move</i>
  from <code>x</code> instead of copying. Occasionally, C++ violates their expectations and performs
  an expensive copy anyway.
  Based on our experience using Clang to diagnose unexpected copies in Chromium, Mozilla,
  and LibreOffice, we propose to change the standard so that these copies will be replaced with
  <i>implicit moves</i>.
Date: 2019-06-17
</pre>

<style>
hilite  {background-color: #FFFF00; font-weight: bold;}
ins  {background-color: #CCFFCC; text-decoration: underline;}
del  {background-color: #FFCACA; text-decoration: line-through;}
</style>

# Changelog # {#changelog}

- R3: Eliminate discussion and move to CWG wording review.

- R2: Added discussion of `return ++x`.

- R1: Added discussion of `return x += y`.


# Background # {#background}

Each version of C++ has improved the efficiency of returning objects by value. By the middle of the last
decade, copy elision was reliable (if not technically guaranteed) in situations like this:

```c++
Widget one() {
    return Widget();  // copy elision
}
Widget two() {
    Widget result;
    return result;  // copy elision
}
```

In C++11, a completely new feature was added: a change to overload resolution which I will call
*implicit move*. Even when copy elision is impossible, the compiler is sometimes
required to *implicitly move* the `return` statement's operand into the result object:

```c++
std::shared_ptr<Base> three() {
    std::shared_ptr<Base> result;
    return result;  // copy elision
}
std::shared_ptr<Base> four() {
    std::shared_ptr<Derived> result;
    return result;  // no copy elision, but implicitly moved (not copied)
}
```

The wording for this optimization was amended by [[CWG1579]]. N4762's wording in
<a href="http://eel.is/c++draft/class.copy.elision#3">[class.copy.elision]/3</a> says:

> In the following copy-initialization contexts, a move operation might be used instead of a copy operation:
>
>   - If the *expression* in a `return` statement is a (possibly parenthesized) *id-expression* that
>     names an object with automatic storage duration declared in the body or *parameter-declaration-clause*
>     of the innermost enclosing function or *lambda-expression*, or
>
>   - if the operand of a *throw-expression* is the name of a non-volatile automatic object
>     (other than a <hilite>function</hilite> or catch-clause parameter) whose scope does not extend beyond
>     the end of the innermost enclosing *try-block* (if there is one),
>
> overload resolution to select the constructor for the copy is first performed as if the object were
> designated by an rvalue. If the first overload resolution fails or was not performed, or if the type
> of the first parameter of the selected <hilite>constructor</hilite> is not an <hilite>rvalue
> reference</hilite> to <hilite>the object's</hilite> type
> (possibly cv-qualified), overload resolution is performed again, considering the object as an lvalue.

Note: Post-Kona draft N4810 extends this wording to cover `co_return` statements too. I don't
understand coroutines very well, but I don't know of any reason why P1155's changes should not apply to
`co_return` just as well as to `return` and `throw`. The proposed wording below reflects my beliefs.

The highlighted phrases above indicate places where the wording diverges from a naïve programmer's intuition.
Consider the following <a href="https://godbolt.org/g/9n8cwh">examples</a>...


## Throwing is pessimized ## {#throwing}

Throwing is pessimized because of the highlighted word <hilite>function</hilite> [parameter].

```c++
void five() {
    Widget w;
    throw w;  // non-guaranteed copy elision, but implicitly moved (never copied)
}
Widget six(Widget w) {
    return w;  // no copy elision, but implicitly moved (never copied)
}
void seven(Widget w) {
    throw w;  // no copy elision, and no implicit move (the object is copied)
}
```

Note: The comment in `seven` matches the current Standard wording, and matches the behavior of GCC.
Most compilers (Clang 4.0.1+, MSVC 2015+, ICC 16.0.3+) already do this implicit move.


## Non-constructor conversion is pessimized ## {#conversion}

Non-constructor conversion is pessimized because of the highlighted word <hilite>constructor</hilite>.

```c++
struct From {
    From(Widget const &);
    From(Widget&&);
};

struct To {
    operator Widget() const &;
    operator Widget() &&;
};

From eight() {
    Widget w;
    return w;  // no copy elision, but implicitly moved (never copied)
}
Widget nine() {
    To t;
    return t;  // no copy elision, and no implicit move (the object is copied)
}
```


## By-value sinks are pessimized ## {#sinks}

By-value sinks are pessimized because of the highlighted phrase <hilite>rvalue reference</hilite>.

```c++
struct Fish {
    Fish(Widget const &);
    Fish(Widget&&);
};

struct Fowl {
    Fowl(Widget);
};

Fish ten() {
    Widget w;
    return w;  // no copy elision, but implicitly moved (never copied)
}
Fowl eleven() {
    Widget w;
    return w;  // no copy elision, and no implicit move (the Widget object is copied)
}
```

Note: The comment in `eleven` matches the current Standard wording, and matches the behavior of
Clang, ICC, and MSVC. One compiler (GCC 5.1+) already does this implicit move.


## Slicing is pessimized ## {#slicing}

Slicing is pessimized because of the highlighted phrase <hilite>the object's</hilite>.

```c++
std::shared_ptr<Base> twelve() {
    std::shared_ptr<Derived> result;
    return result;  // no copy elision, but implicitly moved (never copied)
}
Base thirteen() {
    Derived result;
    return result;  // no copy elision, and no implicit move (the object is copied)
}
```

Note: The comment in `thirteen` matches the current Standard wording, and matches the behavior
of Clang and MSVC. Some compilers (GCC 8.1+, ICC 18.0.0+) already do this implicit move.


We propose to remove all four of these unnecessary limitations.


# Proposed wording relative to N4810 # {#wording}

Modify
<a href="http://eel.is/c++draft/class.copy.elision#3">[class.copy.elision]/3</a> as follows:

> In the following copy-initialization contexts, a move operation might be used instead of a copy operation:
>
>   - If the *expression* in a `return` or `co_return` statement is a (possibly parenthesized) *id-expression* that
>     names an object with automatic storage duration declared in the body or *parameter-declaration-clause*
>     of the innermost enclosing function or *lambda-expression*, or
>
>   - if the operand of a *throw-expression* is the name of a non-volatile automatic object
>     (other than a <del>function or</del> catch-clause parameter) whose scope does not extend beyond
>     the end of the innermost enclosing *try-block* (if there is one),
>
> overload resolution to select the constructor for the copy or the `return_value` overload to call is first performed as if the object were
> designated by an rvalue. If the first overload resolution fails or was not performed, <del>or if the type
> of the first parameter of the selected constructor or the `return_value` overload is not an rvalue reference to the object's type
> (possibly cv-qualified),</del> overload resolution is performed again, considering the object as an lvalue.
> [*Note:* This two-stage overload resolution must be performed regardless of whether copy elision will occur.
> It determines the constructor or the `return_value` overload to be called if elision is not performed, and the selected constructor
> or <del>the</del> `return_value` overload must be accessible even if the call is elided. —*end note*]


# Acknowledgments # {#acknowledgments}

- Thanks to Lukas Bergdoll for his copious feedback.
- Thanks to David Stone for [[P0527]], and for offering to shepherd P1155R0 at the San Diego WG21 meeting (November 2018).
- Thanks to Barry Revzin (see [[Revzin]]) for pointing out the "By-value sinks" case.


<pre class=biblio>
{
  "AWS": {
    "title": "Use const references to extend lifetime of temporaries",
    "href": "https://github.com/aws/aws-sdk-cpp/issues/847",
    "date": "April 2018"
  },
  "Chromium": {
    "title": "clean up and enable Wreturn-std-move",
    "href": "https://bugs.chromium.org/p/chromium/issues/detail?id=832211",
    "date": "April 2018"
  },
  "CWG1579": {
    "title": "Return by converting move constructor",
    "authors": [
        "Jeffrey Yasskin"
    ],
    "href": "http://open-std.org/JTC1/SC22/WG21/docs/cwg_defects.html#1579",
    "date": "October 2012"
  },
  "D43322": {
    "title": "Diagnose cases of 'return x' that should be 'return std::move(x)' for efficiency",
    "authors": [
      "Arthur O'Dwyer"
    ],
    "href": "https://reviews.llvm.org/D43322",
    "date": "February 2018"
  },
  "Folly": {
    "title": "fix -Wreturn-std-move errors",
    "href": "https://github.com/facebook/folly/commit/b5105fc5581eef1af2a809b7a3a50ac820e572ae",
    "date": "April 2018"
  },
  "Khronos": {
    "title": "Use std::move(str) suggested with -Wreturn-std-move",
    "href": "https://github.com/KhronosGroup/SPIRV-Tools/issues/1521",
    "date": "April 2018"
  },
  "LibreOffice": {
    "title": "-Werror,-Wreturn-std-move (recent Clang trunk)",
    "authors": [
      "Stephan Bergmann"
    ],
    "href": "https://cgit.freedesktop.org/libreoffice/core/commit/?id=74b6e61dde64c5e24bffacda6f67dbf3d1fc7032",
    "date": "April 2018"
  },
  "Mozilla": {
    "title": "Various '-Wreturn-std-move' build warnings with clang 7.0 (trunk), for cases where return invokes (cheap) string copy-constructor rather than move constructor",
    "href": "https://bugzilla.mozilla.org/show_bug.cgi?id=1454848",
    "date": "April 2018"
  },
  "P0527": {
    "title": "Implicitly move from rvalue references in return statements",
    "authors": [
      "David Stone"
    ],
    "href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p0527r1.html",
    "date": "November 2017"
  },
  "PR85671": {
    "title": "Lack of std::move() inside operator/ for std::filesystem::path",
    "authors": [
      "Jonathan Wakely"
    ],
    "href": "https://gcc.gnu.org/bugzilla/show_bug.cgi?id=85671",
    "date": "May 2018"
  },
  "Revzin": {
    "title": "std-proposals thread: By-value sinks",
    "authors": [
      "Barry Revzin",
      "Howard Hinnant",
      "Arthur O'Dwyer"
    ],
    "href": "https://groups.google.com/a/isocpp.org/d/msg/std-proposals/eeLS8vI05nM/_BP-8YTPDAAJ",
    "date": "August 2018"
  },
  "RVOHarder": {
    "title": "RVO is Harder than it Looks (CppCon 2018)",
    "authors": [
      "Arthur O'Dwyer"
    ],
    "href": "https://www.youtube.com/watch?v=hA1WNtNyNbo",
    "date": "September 2018"
  },
  "SG14": {
    "title": "inplace_function implicit conversion chooses copy over move",
    "authors": [
      "Arthur O'Dwyer"
    ],
    "href": "https://github.com/WG21-SG14/SG14/issues/125",
    "date": "February 2018"
  }
}
</pre>
