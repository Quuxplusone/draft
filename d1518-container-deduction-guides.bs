<pre class='metadata'>
Title: Stop overconstraining allocators in container deduction guides
Shortname: D1518
Revision: 2
!Draft Revision: 8
Audience: LWG
Status: D
Group: WG21
URL:
!Current Source: <a href="https://github.com/Quuxplusone/draft/blob/gh-pages/d1518-container-deduction-guides.bs">github.com/Quuxplusone/draft/blob/gh-pages/d1518-container-deduction-guides.bs</a>
!Current: <a href="https://rawgit.com/Quuxplusone/draft/gh-pages/d1518-container-deduction-guides.html">rawgit.com/Quuxplusone/draft/gh-pages/d1518-container-deduction-guides.html</a>
Editor: Arthur O'Dwyer, arthur.j.odwyer@gmail.com
Editor: Mike Spertus, msspertu@amazon.com
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract:
  Discussion of flatmap's deduction guides revealed that the deduction guides for sequence
  containers and container adaptors are needlessly overconstrained, making use cases such as
  pmr containers unnecessarily difficult. We fix this.
Date: 2021-02-24
</pre>

<style>
ins  {background-color: #CCFFCC; text-decoration: underline;}
del  {background-color: #FFCACA; text-decoration: line-through;}
</style>

# Changelog # {#changelog}

- R2: Move proposed wording into a single section, and remove Bikeshed "notes" that
    were never intended to propose new "Note" elements in the wording.

- R1: Incorporate LWG wording feedback. Mention [[LWG3506]] and [[P1425R3]].


# Stop overconstraining allocators that do not participate in deduction # {#overconst1}

## The problem ## {#problem1}

Consider this code:

```c++
std::pmr::monotonic_buffer_resource mr;
std::pmr::polymorphic_allocator<int> a = &mr;
std::pmr::vector<int> pv(a);

auto s1 = std::stack<int, std::pmr::vector<int>>(pv);
auto s2 = std::stack<int, std::pmr::vector<int>>(pv, a);
auto s3 = std::stack<int, std::pmr::vector<int>>(pv, &mr);

auto ds1 = std::stack(pv);
auto ds2 = std::stack(pv, a);
auto ds3 = std::stack(pv, &mr);
```

The initializers of `s1`, `s2`, and `s3` (which do not use CTAD) are all well-formed,
as are the initializers of `ds1` and `ds2` (which do).

However, the natural and useful `ds3` is ill-formed, even though the `&mr` argument is irrelevant to determining the
template arguments for `stack`! It seems clearly wrong that we give all the right information to unambiguously deduce
the desired specialization of stack and then reject what would be a perfectly valid constructor invocation for that
class. The allocator parameter’s type does not *contribute* to class template argument deduction in these cases;
it brings no new information, and therefore should be treated no differently than it is in the non-CTAD case.
Indeed, we believe this is an oversight and should simply be fixed.


## The explanation ## {#explanation1}

`stack` has one relevant deduction guide.

```c++
    template<class Container, class Allocator>
    stack(Container, Allocator) -> stack<typename Container::value_type, Container>;
```

This deduction guide satisfies the following constraints.

[container.adaptors.general] says:
<small><blockquote>
A deduction guide for a container adaptor shall not participate in overload resolution if
any of the following are true: ...

    - <b>It has an `Allocator` template parameter and a type that does not qualify as an allocator
          is deduced for that parameter.</b>

    - It has both `Container` and `Allocator` template parameters, and
          `uses_allocator_v<Container, Allocator>` is `false`.

</blockquote></small>

To qualify as an allocator, a type `A` must have a nested typedef `A::value_type`
<small>([container.requirements.general]/17)</small>.
Since `std::pmr::monotonic_buffer_resource*` has no such nested typedef,
`std::pmr::monotonic_buffer_resource*` doesn't qualify as an allocator.
However, `uses_allocator_v<std::pmr::vector<int>, std::pmr::monotonic_buffer_resource*>` is `true`.

Because the type of `&mr` doesn't qualify as an allocator, the deduction guide drops out
of overload resolution, failing deduction even though it has all the information
needed to safely deduce the correct template arguments for `stack`.


# Stop deducing from allocators that should not participate in deduction # {#overconst2}

## The problem ## {#problem2}

Consider the following code:
```c++
std::pmr::monotonic_buffer_resource mr;
std::pmr::polymorphic_allocator<int> a = &mr;
std::pmr::vector<int> pv(a);

auto v1 = std::vector<int, std::pmr::polymorphic_allocator<int>>(pv);
auto v2 = std::vector<int, std::pmr::polymorphic_allocator<int>>(pv, a);
auto v3 = std::vector<int, std::pmr::polymorphic_allocator<int>>(pv, &mr);

auto dv1 = std::vector(pv);
auto dv2 = std::vector(pv, a);
auto dv3 = std::vector(pv, &mr);

```
The initializers of `v1`, `v2`, and `v3` (which do not use CTAD) are all well-formed,
as are the initializers of `dv1` and `dv2` (which do).

But the initializer of `dv3` is ill-formed!

Again, we know from the `pv` argument that the correct type for the vector is `decltype(pv)`, i.e. `std::pmr::vector<int>`. Therefore we
know what is the possible range of types for the allocator parameter. The allocator parameter’s type does not *contribute*
to class template argument deduction in these cases; it brings no new information, and therefore should be treated no differently
than it is in the non-CTAD case.

The problem we see with `vector` also occurs for all other sequence containers, associative containers, and unordered associative containers.


## The explanation ## {#explanation2}

`vector` has only one deduction guide, and it's not relevant to what happens here. Here, we end up
looking at the implicit guide generated from the constructor

```c++
    template<class T, class Allocator>
    class vector {
        vector(const vector<T, Allocator>&, const Allocator&);
    };
```

From the first parameter, we deduce `T=int` and `Allocator=std::pmr::polymorphic_allocator<int>`.
From the second parameter, we deduce `Allocator=std::monotonic_buffer_resource*`.
We've deduced conflicting types for `Allocator`, so deduction fails.

In this case, the second argument unnecessarily participates in deduction, and again unexpectedly
prevents natural and useful code from working as desired.

Observe that even in the absence of CTAD, the signature above
permits construction only from the same specialization of `vector`,
not from any arbitrary specialization of `vector`. For example:
```c++
    std::vector<T, A1> v1;
    std::vector<T, A2> v2(v1, A2());  // ill-formed
```


# Proposed wording # {#wording}

Modify [ [container.adaptors.general](http://eel.is/c++draft/container.adaptors.general)] as follows:

<small><blockquote>
A deduction guide for a container adaptor shall not participate in overload resolution if any of the following are true:

- It has an `InputIterator` template parameter and a type that does not qualify as an
     input iterator is deduced for that parameter.

- It has a `Compare` template parameter and a type that qualifies as an allocator is deduced
     for that parameter.

- It has a `Container` template parameter and a type that qualifies as an allocator is deduced
     for that parameter.

- It has <ins>no `Container` template parameter, and it has</ins> an `Allocator` template parameter<ins>,</ins>
     and a type that does not qualify as an allocator is deduced for that parameter.

- It has both `Container` and `Allocator` template parameters, and
     `uses_allocator_v<Container, Allocator>` is `false`.

</blockquote></small>

Modify [ [deque.overview](http://eel.is/c++draft/deque.overview)] as follows:

<small><blockquote>
<pre>
    deque(deque&&);
    <del>deque(const deque&, const Allocator&);</del>
    <ins>deque(const deque&, const type_identity_t&lt;Allocator>&);</ins>
    <del>deque(deque&&, const Allocator&);</del>
    <ins>deque(deque&&, const type_identity_t&lt;Allocator>&);</ins>
    deque(initializer_list&lt;T>, const Allocator& = Allocator());
</pre>
</blockquote></small>

Modify [ [forwardlist.overview](http://eel.is/c++draft/forwardlist.overview)] as follows:

<small><blockquote>
<pre>
    forward_list(forward_list&&);
    <del>forward_list(const forward_list&, const Allocator&);</del>
    <ins>forward_list(const forward_list&, const type_identity_t&lt;Allocator>&);</ins>
    <del>forward_list(forward_list&&, const Allocator&);</del>
    <ins>forward_list(forward_list&&, const type_identity_t&lt;Allocator>&);</ins>
    forward_list(initializer_list&lt;T>, const Allocator& = Allocator());
</pre>
</blockquote></small>

Modify [ [list.overview](http://eel.is/c++draft/list.overview)] as follows:

<small><blockquote>
<pre>
    list(list&&);
    <del>list(const list&, const Allocator&);</del>
    <ins>list(const list&, const type_identity_t&lt;Allocator>&);</ins>
    <del>list(list&&, const Allocator&);</del>
    <ins>list(list&&, const type_identity_t&lt;Allocator>&);</ins>
    list(initializer_list&lt;T>, const Allocator& = Allocator());
</pre>
</blockquote></small>

Modify [ [vector.overview](http://eel.is/c++draft/vector.overview)] as follows:

<small><blockquote>
<pre>
    constexpr vector(vector&&) noexcept;
    <del>constexpr vector(const vector&, const Allocator&);</del>
    <ins>constexpr vector(const vector&, const type_identity_t&lt;Allocator>&);</ins>
    <del>constexpr vector(vector&&, const Allocator&);</del>
    <ins>constexpr vector(vector&&, const type_identity_t&lt;Allocator>&);</ins>
    constexpr vector(initializer_list&lt;T>, const Allocator& = Allocator());
</pre>
</blockquote></small>

Modify [ [vector.bool](http://eel.is/c++draft/vector.bool)] as follows:

<small><blockquote>
<pre>
    constexpr vector(vector&& x);
    <del>constexpr vector(const vector&, const Allocator&);</del>
    <ins>constexpr vector(const vector&, const type_identity_t&lt;Allocator>&);</ins>
    <del>constexpr vector(vector&&, const Allocator&);</del>
    <ins>constexpr vector(vector&&, const type_identity_t&lt;Allocator>&);</ins>
    constexpr vector(initializer_list&lt;bool>, const Allocator& = Allocator());
</pre>
</blockquote></small>

Modify [ [map.overview](http://eel.is/c++draft/map.overview)] as follows:

<small><blockquote>
<pre>
    explicit map(const Allocator&);
    <del>map(const map&, const Allocator&);</del>
    <ins>map(const map&, const type_identity_t&lt;Allocator>&);</ins>
    <del>map(map&&, const Allocator&);</del>
    <ins>map(map&&, const type_identity_t&lt;Allocator>&);</ins>
    map(initializer_list&lt;value_type>,
      const Compare& = Compare,
      const Allocator& = Allocator());
</pre>
</blockquote></small>

Modify [ [multimap.overview](http://eel.is/c++draft/multimap.overview)] as follows:

<small><blockquote>
<pre>
    explicit multimap(const Allocator&);
    <del>multimap(const multimap&, const Allocator&);</del>
    <ins>multimap(const multimap&, const type_identity_t&lt;Allocator>&);</ins>
    <del>multimap(multimap&&, const Allocator&);</del>
    <ins>multimap(multimap&&, const type_identity_t&lt;Allocator>&);</ins>
    multimap(initializer_list&lt;value_type>,
      const Compare& = Compare,
      const Allocator& = Allocator());
</pre>
</blockquote></small>

Modify [ [set.overview](http://eel.is/c++draft/set.overview)] as follows:

<small><blockquote>
<pre>
    explicit set(const Allocator&);
    <del>set(const set&, const Allocator&);</del>
    <ins>set(const set&, const type_identity_t&lt;Allocator>&);</ins>
    <del>set(set&&, const Allocator&);</del>
    <ins>set(set&&, const type_identity_t&lt;Allocator>&);</ins>
    set(initializer_list&lt;value_type>, const Compare& = Compare(),
        const Allocator& = Allocator());
</pre>
</blockquote></small>

Modify [ [multiset.overview](http://eel.is/c++draft/multiset.overview)] as follows:

<small><blockquote>
<pre>
    explicit multiset(const Allocator&);
    <del>multiset(const multiset&, const Allocator&);</del>
    <ins>multiset(const multiset&, const type_identity_t&lt;Allocator>&);</ins>
    <del>multiset(multiset&&, const Allocator&);</del>
    <ins>multiset(multiset&&, const type_identity_t&lt;Allocator>&);</ins>
    multiset(initializer_list&lt;value_type>, const Compare& = Compare(),
        const Allocator& = Allocator());
</pre>
</blockquote></small>

Modify [ [unord.map.overview](http://eel.is/c++draft/unord.map.overview)] as follows:

<small><blockquote>
<pre>
    explicit unordered_map(const Allocator&);
    <del>unordered_map(const unordered_map&, const Allocator&);</del>
    <ins>unordered_map(const unordered_map&, const type_identity_t&lt;Allocator>&);</ins>
    <del>unordered_map(unordered_map&&, const Allocator&);</del>
    <ins>unordered_map(unordered_map&&, const type_identity_t&lt;Allocator>&);</ins>
    unordered_map(initializer_list&lt;value_type> il,
                  size_type n = <i>see below</i>,
                  const hasher& hf = hasher(),
                  const key_equal& eql = key_equal(),
                  const allocator_type& a = allocator_type());
</pre>
</blockquote></small>

Modify [ [unord.multimap.overview](http://eel.is/c++draft/unord.multimap.overview)] as follows:

<small><blockquote>
<pre>
    explicit unordered_multimap(const Allocator&);
    <del>unordered_multimap(const unordered_multimap&, const Allocator&);</del>
    <ins>unordered_multimap(const unordered_multimap&, const type_identity_t&lt;Allocator>&);</ins>
    <del>unordered_multimap(unordered_multimap&&, const Allocator&);</del>
    <ins>unordered_multimap(unordered_multimap&&, const type_identity_t&lt;Allocator>&);</ins>
    unordered_multimap(initializer_list&lt;value_type> il,
                  size_type n = <i>see below</i>,
                  const hasher& hf = hasher(),
                  const key_equal& eql = key_equal(),
                  const allocator_type& a = allocator_type());
</pre>
</blockquote></small>

Modify [ [unord.set.overview](http://eel.is/c++draft/unord.set.overview)] as follows:

<small><blockquote>
<pre>
    explicit unordered_set(const Allocator&);
    <del>unordered_set(const unordered_set&, const Allocator&);</del>
    <ins>unordered_set(const unordered_set&, const type_identity_t&lt;Allocator>&);</ins>
    <del>unordered_set(unordered_set&&, const Allocator&);</del>
    <ins>unordered_set(unordered_set&&, const type_identity_t&lt;Allocator>&);</ins>
    unordered_set(initializer_list&lt;value_type> il,
                  size_type n = <i>see below</i>,
                  const hasher& hf = hasher(),
                  const key_equal& eql = key_equal(),
                  const allocator_type& a = allocator_type());
</pre>
</blockquote></small>

Modify [ [unord.multiset.overview](http://eel.is/c++draft/unord.multiset.overview)] as follows:

<small><blockquote>
<pre>
    explicit unordered_multiset(const Allocator&);
    <del>unordered_multiset(const unordered_multiset&, const Allocator&);</del>
    <ins>unordered_multiset(const unordered_multiset&, const type_identity_t&lt;Allocator>&);</ins>
    <del>unordered_multiset(unordered_multiset&&, const Allocator&);</del>
    <ins>unordered_multiset(unordered_multiset&&, const type_identity_t&lt;Allocator>&);</ins>
    unordered_multiset(initializer_list&lt;value_type> il,
                  size_type n = <i>see below</i>,
                  const hasher& hf = hasher(),
                  const key_equal& eql = key_equal(),
                  const allocator_type& a = allocator_type());
</pre>
</blockquote></small>


# Implementation note # {#implementation}
Some of the changes proposed in this paper have already been implemented "accidentally" by
one or more library implementations,
as shown in the following table and [this Godbolt](https://godbolt.org/z/5oKKGd):

<small>
<table class="def">
<tr><th>Construct</th><th>Well-formed</th><th>SFINAE-friendly<br> ill-formed</th><th>Hard error</th></tr>

<tr><td>std::deque(pd, &mr)</td> <td></td> <td>MSVC, libstdc++, libc++</td> <td></td>
<tr><td>std::forward_list(pfl, &mr)</td> <td></td> <td>MSVC, libstdc++, libc++</td> <td></td>
<tr><td>std::list(pl, &mr)</td> <td></td> <td>MSVC, libstdc++, libc++</td> <td></td>
<tr><td>std::vector(pv, &mr)</td> <td></td> <td>MSVC, libstdc++, libc++</td> <td></td>
<tr><td>std::map(pm, &mr)</td> <td>MSVC, libc++</td> <td>libstdc++</td> <td></td>
<tr><td>std::multimap(pmm, &mr)</td> <td>MSVC, libc++</td> <td>libstdc++</td> <td></td>
<tr><td>std::multiset(pms, &mr)</td> <td>MSVC, libc++</td> <td>libstdc++</td> <td></td>
<tr><td>std::set(ps, &mr)</td> <td>MSVC, libc++</td> <td>libstdc++</td> <td></td>
<tr><td>std::unordered_map(pum, &mr)</td> <td>MSVC, libstdc++, libc++</td> <td></td> <td></td>
<tr><td>std::unordered_multimap(pumm, &mr)</td> <td>MSVC, libstdc++, libc++</td> <td></td> <td></td>
<tr><td>std::unordered_multiset(pums, &mr)</td> <td>MSVC, libstdc++, libc++</td> <td></td> <td></td>
<tr><td>std::unordered_set(pus, &mr)</td> <td>MSVC, libstdc++, libc++</td> <td></td> <td></td>
<tr></tr>
<tr><td>std::priority_queue(ppq, &mr)</td> <td>MSVC, libstdc++, libc++</td> <td></td> <td></td>
<tr><td>std::queue(pq, &mr)</td> <td>MSVC, libstdc++, libc++</td> <td></td> <td></td>
<tr><td>std::stack(ps, &mr)</td> <td>MSVC, libstdc++, libc++</td> <td></td> <td></td>
<tr></tr>
<tr><td>std::priority_queue(comp, pv, &mr)</td> <td></td> <td>MSVC, libstdc++, libc++</td> <td></td>
<tr><td>std::queue(pd, &mr)</td> <td></td> <td>MSVC, libstdc++, libc++</td> <td></td>
<tr><td>std::stack(pv, &mr)</td> <td></td> <td>MSVC, libstdc++, libc++</td> <td></td>
</table>
</small>

<pre class=biblio>
{
  "P0433R3": {
    "authors": [
      "Mike Spertus", "Walter Brown", "Stephan T. Lavavej"
    ],
    "title": "Toward a resolution of US7 and US14: Integrating template deduction for class templates into the standard library",
    "href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0433r3.html",
    "date": "June 2017"
  },
  "LWG3506": {
    "authors": [
      "Tim Song"
    ],
    "title": "LWG 3506: Missing allocator-extended constructors for priority_queue",
    "href": "https://cplusplus.github.io/LWG/issue3506",
    "date": "November 2020"
  },
  "P1425R3": {
    "authors": [
      "Corentin Jabot"
    ],
    "title": "P1425R3: Iterator-pair constructors for stack and queue",
    "href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r3.pdf",
    "date": "February 2021"
  }
}
</pre>
