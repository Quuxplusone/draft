<pre class='metadata'>
Title: <code>std::span</code> over an initializer list
Shortname: D2447
Revision: 6
!Draft Revision: 8
Audience: LWG
Status: D
Group: WG21
URL:
Editor: Arthur O'Dwyer, arthur.j.odwyer@gmail.com
Editor: Federico Kircheis, federico.kircheis@gmail.com
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract:
  <code>span&lt;const int&gt;</code> can be a lightweight drop-in replacement
  for <code>const vector&lt;int&gt;&amp;</code> in the same way that <code>string_view</code>
  can replace <code>const string&amp;</code>. While <code>"abc"</code> binds to a <code>string_view</code>
  function parameter, <code>{1,2,3}</code> fails to bind to a <code>span&lt;const int&gt;</code> function parameter.
  We show why this gap is undesirable, and propose to close it, ideally as a DR.
Date: 2023-11-09
</pre>

<style>
hilite  {background-color: #FFFF00; font-weight: bold;}
ins  {background-color: #CCFFCC; text-decoration: underline;}
del  {background-color: #FFCACA; text-decoration: line-through;}
td {font-size: smaller;}
</style>

# Changelog # {#changelog}

- R6 (post-Kona 2023):

    - Remove the constructor's `noexcept`, because it has a precondition.
        An LWG issue will be filed to remove the `noexcept` on [[span.cons]/20](https://eel.is/c++draft/span.cons#20).

- R5 (post-LEWG 2023):

    - Reintroduce feature-test macro `__cpp_lib_span_initializer_list`.

    - Add Annex C entries to [[#wording]]; LEWG points out that it's easy for LWG
        to eliminate insertions they deem redundant.

- R4 (pre-Varna 2023):

    - Reorganize references to [[P2752]] and fix HTML goofs in proposed wording.

- R3:

    - Changed primary authorship from Federico Kircheis to Arthur O'Dwyer.

    - Removed R2's feature-test macro `__cpp_lib_span_init`; it didn't seem motivated.

- R2:

    - Discussed in LEWG telecon, <a href="https://wiki.edg.com/bin/view/Wg21telecons2022/P2447#Library-Evolution-2022-07-26">2022-07-26</a>


# Background # {#background}

C++17 added `string_view` as a "view" over constant string data. Its main purpose
is as a lightweight drop-in replacement for `const string&` function parameters.

<table>
<tr><td>C++14 `string`</td><td>C++17 `string_view`</td></tr>
<tr><td><xmp>
int take(const std::string& s) {
    return s[0] + s.size();
}
</xmp></td><td><xmp>
int take(std::string_view sv) {
    return s[0] + s.size();
}
</xmp></td></tr><tr><td><xmp>
std::string abc = "abc";
take(abc);
</xmp></td><td><xmp>
std::string abc = "abc";
take(abc);
</xmp></td></tr><tr><td><xmp>
take("abc");
</xmp></td><td><xmp>
take("abc");
</xmp></td></tr><tr><td><xmp>
take(std::string("abc"));
</xmp></td><td><xmp>
take(std::string("abc"));
take(std::string_view("abc"));
</xmp></td></tr>
</table>

C++20 added `span<const T>` as a "view" over constant contiguous data of type `T` (such as
arrays and vectors). One of its main purposes (although not its only one) is as a
lightweight drop-in replacement for `const vector<T>&` function parameters.

<table>
<tr><td>C++17 `vector`</td><td>C++20 `span`</td></tr>
<tr><td><xmp>
int take(const std::vector<int>& v) {
    return v[0] + v.size();
}
</xmp></td><td><xmp>
int take(std::span<const int> v) {
    return v[0] + v.size();
}
</xmp></td></tr><tr><td><xmp>
std::vector<int> abc = {1,2,3};
take(abc);
</xmp></td><td><xmp>
std::vector<int> abc = {1,2,3};
take(abc);
</xmp></td></tr><tr><td><xmp>
take({1,2,3});
</xmp></td><td>
</td></tr><tr><td><xmp>
take({}); // size=0
take({{1,2,3}});
take(std::vector{1,2,3});
take(std::initializer_list<int>{1,2,3});
</xmp></td><td><xmp>
take({}); // size=0
take({{1,2,3}});
take(std::vector{1,2,3});
take(std::initializer_list<int>{1,2,3});
take(std::span<const int>({1,2,3}));
</xmp></td></tr>
</table>

This table has a conspicuous gap. The singly-braced initializer list `{1,2,3}`
is implicitly convertible to `std::vector<int>`, but not to `std::span<const int>`.


# Solution # {#solution}

We propose simply that `std::span<const T>` should be convertible from an appropriate
*braced-initializer-list*. In practice this means adding a constructor from `std::initializer_list`.

## Implementation experience ## {#experience}

This proposal has been implemented in Arthur's fork of libc++ since October 2021.
See <a href="https://quuxplusone.github.io/blog/2021/10/03/p2447-span-from-initializer-list/">"`span` should have a converting constructor from `initializer_list`"</a>
(2021-10-03) and [[Patch]].

## What about dangling? ## {#dangling}

`span`, like `string_view`, is specifically designed to bind to rvalues as well as lvalues.
This is what lets us write useful code like:
```c++
int take(std::string_view s);
std::string give_string();
int x = take(give_string());

int take(std::span<const int> v);
std::vector<int> give_vector();
int x = take(give_vector());
```

Careless misuse of `string_view` and `span` outside a function parameter list can dangle:
```c++
std::string_view s = give_string(); // dangles
std::span<const int> v = give_vector(); // dangles
```

P2447 doesn't propose to increase the risk in this area; dangling is already likely when `span` or
`string_view` is carelessly misused. We simply propose to close the ergonomic syntax gap between `span` and `string_view`.

<table>
<tr><td>Before</td><td>After P2447</td></tr>
<tr><td><xmp>
std::string_view      s = "abc";  // OK
std::string_view      s = "abc"s; // dangles
std::span<const char> v = "abc";  // OK
std::span<const char> v = "abc"s; // dangles
</xmp></td><td><xmp>
std::string_view      s = "abc";  // OK
std::string_view      s = "abc"s; // dangles
std::span<const char> v = "abc";  // OK
std::span<const char> v = "abc"s; // dangles
</xmp></td></tr><tr><td><xmp>
std::span<const int> v = std::vector{1,2,3}; // dangles
auto v = std::span<const int>({1,2,3});      // dangles
std::span<const int> v = {{1,2,3}};          // dangles
</xmp></td><td><xmp>
std::span<const int> v = std::vector{1,2,3}; // dangles
auto v = std::span<const int>({1,2,3});      // dangles
std::span<const int> v = {{1,2,3}};          // dangles
std::span<const int> v = {1,2,3};            // dangles
</xmp></td></tr>
</table>

## Why not just double the braces? ## {#braces}

Since we can already write
```c++
std::span<const int> v = {{1,2,3}}; // dangles
```
then why not call that "good enough"? Why do we need to be able to use a single set of braces?

Well, a single set of braces is good enough for `vector`, and we want `span` to be a drop-in replacement
for `vector` in function parameter lists, so we need to support the syntax `vector` does.
There was a period right after C++11 where some people were writing
```c++
std::vector<int> v = {{1,2,3}};
```
but by C++14 we had settled firmly on "one set of braces" as the preferred style (matching the
preferred style for C arrays, pairs, tuples, etc.)

So I prefer to turn the question around and say: Since we can already implicitly treat `{{1,2,3}}`
as a `span`, how could there be any additional harm in treating `{1,2,3}` as a `span`?

### Better performance via synergy with P2752 ### {#p2752}

[[P2752]], adopted as a DR at Varna 2023, allows a constant `initializer_list` like `{1,2,3}`
to refer to a backing array in static storage, rather than forcing all backing arrays onto the stack.
This doesn't change anything dangling-wise: referring to the backing array of an
`initializer_list` outside that `initializer_list`'s lifetime remains undefined behavior.
```c++
std::string_view s = "abc";            // OK, no dangling
std::span<const int> v1 = {1,2,3};     // dangles, even after P2752
```

Today, `{{1,2,3}}` converts to `span` by materializing a temporary `const int[3]` on the stack.
Tomorrow, if P2447 is adopted, `{1,2,3}` will convert to `span` via an `initializer_list` that
refers to a backing array in static storage.
In other words, the `initializer_list` constructor we propose
here in P2447 is "more optimizer-friendly" than today's array-temporary constructor.

This example (<a href="https://godbolt.org/z/7a5zGnx5s">Godbolt</a>) shows how
P2447 lets us benefit from P2752's optimization:
```c++
int perf(std::span<const int>);

int test() {
    return perf({{1,2,3}});
}
```

<table>
<tr><td></td><td>`{{1,2,3}}`</td><td>`{1,2,3}`</td></tr>
<tr><th>Before 2752</th><td>Array on stack</td><td>Ill-formed</td></tr>
<tr><th>Today</th><td>Array on stack</td><td>Ill-formed</td></tr>
<tr><th>P2447</th><td>IL in rodata, tail-call</td><td>IL in rodata, tail-call</td></tr>
</table>

In each row, there's no performance difference between the single-braced or double-braced form.
But the only way to reach the bottom row (tail-call, no stack usage) in *either* column
is to adopt P2447, which by a happy coincidence also permits the single-braced form.

# Breaking changes # {#annex-c}

This change will, of course, break some code (most of it pathological).
We propose adding three new examples to Annex C.
But *any* change to overload sets can break code, and sometimes LWG doesn't bother with
an Annex C entry.
For example, C++23 adopted [[P1425]] "Iterator-pair constructors for `stack` and `queue`"
with no change to Annex C, despite its breaking code like this:
```c++
void zero(queue<int>);
void zero(pair<int*,int*>);
int a[10];
void test() { zero({a, a+10}); }
```
<b>Before:</b> Calls `zero(pair<int, int>)`.<br/>
<b>After P1425:</b> Ambiguous.<br/>
<b>To fix:</b> Eliminate the ambiguous overloading, or cast the argument to `pair`.

Therefore, we're happy for LWG to eliminate any or all of our proposed Annex C entries
if they're going too far into the weeds.

For explanation and suggested fixits for each of the Annex C examples included in [[#wording]],
see <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2447r4.html#annex-c">P2447R4 ยง4</a>.


# Straw polls # {#polls}

P2447R4 was presented to LEWG on 2023-09-12. The following polls were taken. The first
was classified as "no consensus," the second as "weak consensus."

<table class="def">
<tr><th style="width: 70%;"></th><th>**SF**</th><th>**F**</th><th>**N**</th><th>**A**</th><th>**SA**</th></tr>

<tr><th><small>Forward P2447R4 to LWG for C++26 and as a defect.</th>
<th> 2 </th><th> 5 </th><th> 3 </th><th> 2 </th><th> 1 </th></tr>

<tr><th><small>Forward P2447R4 to LWG for C++26 (not as a defect).</th>
<th> 2 </th><th> 6 </th><th> 4 </th><th> 1 </th><th> 1 </th></tr>
</table>


# Proposed wording # {#wording}

Modify <a href="https://eel.is/c++draft/span.syn">[span.syn]</a> as follows:

<small><blockquote><pre>
#include &lt;initializer_list&gt;     <i>// see [initializer.list.syn]</i></pre></blockquote></small>

Modify <a href="https://eel.is/c++draft/span.overview">[span.overview]</a> as follows:

<small><blockquote><pre>
  template&lt;size_t N>
    constexpr span(type_identity_t&lt;element_type> (&amp;arr)\[N]) noexcept;
  template&lt;class T, size_t N>
    constexpr span(array&lt;T, N>&amp; arr) noexcept;
  template&lt;class T, size_t N>
    constexpr span(const array&lt;T, N>&amp; arr) noexcept;
  template&lt;class R>
    constexpr explicit(extent != dynamic_extent) span(R&amp;&amp; r);
  <ins>constexpr explicit(extent != dynamic_extent) span(std::initializer_list&lt;value_type> il);</ins>
  constexpr span(const span&amp; other) noexcept = default;
  template&lt;class OtherElementType, size_t OtherExtent>
    constexpr explicit(<i>see below</i>) span(const span&lt;OtherElementType, OtherExtent>&amp; s) noexcept;
</pre></blockquote></small>

Modify <a href="https://eel.is/c++draft/span.cons">[span.cons]</a> as follows:

<small><blockquote>
<pre>
  <ins>constexpr explicit(extent != dynamic_extent) span(std::initializer_list&lt;value_type> il);</ins>
</pre>
<p><ins><i>Constraints:</i> `is_const_v<element_type>` is `true`.</ins>
<p><ins><i>Preconditions:</i> If `extent` is not equal to `dynamic_extent`, then `il.size()` is equal to `extent`.</ins>
<p><ins><i>Effects:</i> Initializes <i>`data_`</i> with `il.begin()` and <i>`size_`</i> with `il.size()`.</ins>
</blockquote></small>

Modify <a href="https://eel.is/c++draft/diff">[diff.cpp26]</a> as follows:

Note: For explanation and suggested fixits for each of these examples,
see <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2447r4.html#annex-c">P2447R4 ยง4</a>.
My understanding is that Annex C wording shouldn't contain that extra material.

<small><blockquote>
<p><ins><b>[containers]: containers library</b></ins>
<p><ins>1โค Affected subclause: [span.overview]</ins><br>
<ins><b>Change:</b> `span<const T>` is constructible from `initializer_list<T>`.</ins><br>
<ins><b>Rationale:</b> Permit passing a braced initializer list to a function taking `span`.</ins><br>
<ins><b>Effect on original feature:</b> Valid C++ 2023 code that relies on the lack of this constructor may refuse to compile, or change behavior. For example:</ins>
<pre>
  <ins>void one(pair&lt;int, int>);    // #1</ins>
  <ins>void one(span&lt;const int>);   // #2</ins>
  <ins>void t1() { one({1,2}); }  // ambiguous between #1 and #2; previously called #1</ins>

  <ins>void two(span&lt;const int, 2>);</ins>
  <ins>void t2() { two({{1,2}}); }  // ill-formed; previously well-formed</ins>

  <ins>void *a[10];</ins>
  <ins>int x = span&lt;void* const>{a, 0}.size(); // x is 2; previously 0</ins>
  <ins>any b[10];</ins>
  <ins>int y = span&lt;const any>{b, b+10}.size(); // y is 2; previously 10</ins>
</pre>
</blockquote></small>

Add a feature-test macro to <a href="https://eel.is/c++draft/version.syn">[version.syn]/2</a> as follows:

<small><blockquote>
<pre>
#define __cpp_lib_span                    202002L // also in &lt;span>
<ins>#define __cpp_lib_span_initializer_list   XXYYZZL // also in &lt;span></ins>
#define __cpp_lib_spanstream              202106L // also in &lt;spanstream>
</pre>
</blockquote></small>


# Acknowledgments # {#acknowledgments}

- Thanks to Federico Kircheis for writing the first drafts of this paper.

- Thanks to Jarrad Waterloo for his support.

<pre class=biblio>
{
  "P1425": {
    "title": "Iterator-pair constructors for stack and queue",
    "authors": [
      "Corentin Jabot"
    ],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p1425r4.pdf",
    "date": "March 2021"
  },
  "P2752": {
    "title": "Static storage for braced initializers",
    "authors": [
      "Arthur O'Dwyer"
    ],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2752r3.html",
    "date": "June 2023"
  },
  "Patch": {
    "title": "Implement P2447 std::span convertible from std::initializer_list",
    "authors": [
      "Arthur O'Dwyer"
    ],
    "href": "https://github.com/Quuxplusone/llvm-project/pull/17",
    "date": "October 2021"
  }
}
</pre>
