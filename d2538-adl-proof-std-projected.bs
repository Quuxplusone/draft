<pre class='metadata'>
Title: ADL-proof std::projected
Shortname: D2538
Revision: 2
!Draft Revision: 5
Audience: LWG
Status: D
Group: WG21
URL:
!Current Source: <a href="https://github.com/Quuxplusone/draft/blob/gh-pages/d2538-adl-proof-std-projected.bs">github.com/Quuxplusone/draft/blob/gh-pages/d2538-adl-proof-std-projected.bs</a>
!Current: <a href="https://rawgit.com/Quuxplusone/draft/gh-pages/d2538-adl-proof-std-projected.html">rawgit.com/Quuxplusone/draft/gh-pages/d2538-adl-proof-std-projected.html</a>
Editor: Arthur O'Dwyer, arthur.j.odwyer@gmail.com
Editor: Casey Carter, casey@carter.net
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract:
  When <tt>it</tt> is a pointer of type <tt>Danger*</tt>, evaluating <tt>*it</tt> does not perform ADL and
  does not attempt to complete the associated type <tt>Danger</tt>. But when <tt>proj</tt> is an iterator
  of type <tt>projected&lt;Danger*, identity&gt;</tt>, evaluating <tt>*proj</tt> does perform ADL and will
  attempt to complete <tt>Danger</tt>. Thus, most Ranges algorithms are fundamentally
  "less ADL-proof" than their STL Classic counterparts, and some concepts such as <tt>indirectly_comparable</tt>
  can result in unexpected hard errors.
  We fix this by respecifying <tt>projected&lt;I, Proj&gt;</tt> in a backward-compatible way so that its
  associated entities do not include its template arguments.
  We also include the fix for [[LWG3859]].
  The whole thing should be treated as a DR against C++20.
Date: 2023-03-19
</pre>

<style>
hilite  {background-color: #FFFF00; font-weight: bold;}
ins  {background-color: #CCFFCC; text-decoration: underline;}
del  {background-color: #FFCACA; text-decoration: line-through;}
</style>

# Changelog # {#changelog}

- R2:

    - Merge the fix for [[LWG3859]]. Add the `isNull` example, which is not
        fixed by LWG3859 alone, but is fixed by this combined patch.

- R1:

    - Added Casey Carter as coauthor.

# Background on ADL-proofing # {#background}

Throughout this paper, we use `Holder<Incomplete>` as the canonical example
of a "dangerous-to-complete" type.

```c++
template<class T> struct Holder { T t; };
struct Incomplete;
```

Any operation that requires type `Holder<Incomplete>` to be completed will trigger
a hard error. For example:

```
error: field has incomplete type 'Incomplete'
template<class T> struct Holder { T t; };
                                    ^
<source>:6:20: note: in instantiation of template class 'Holder<Incomplete>' requested here
Holder<Incomplete> h;
                   ^
```

One such operation is ADL. For example, this snippet will trigger a hard error:

```c++
Holder<Incomplete> *p;
int f(Holder<Incomplete>*);
int x = f(p);  // error: ADL requires completing the associated type Holder<Incomplete>
```

but this snippet will be OK:

```c++
Holder<Incomplete> *p;
int f(Holder<Incomplete>*);
int x = ::f(p);  // OK: no ADL, therefore no error
```

Most operations on native pointers do not trigger ADL. For example:

```c++
Holder<Incomplete> *a[10] = {}; // ten null pointers
Holder<Incomplete> **p = a;                 // OK
p += 1;                                     // OK
assert(*p == nullptr);                      // OK
assert(p == a+1);                           // OK
assert(std::count(a, a+10, nullptr) == 10); // OK
```

The libc++ test suite includes a lot of "ADL-proofing" test cases, to make sure that
our STL algorithms don't unnecessarily trigger the completion of associated types.
Libc++ considers this *not* a conformance issue, but a pretty important
quality-of-implementation issue. Unnecessarily prematurely completing a type can
cause hard errors for the user that are difficult to fix; I imagine it could
cause ODR issues too.

For more information, see [[Uglification]].

# The problem in C++20 # {#problem}

Most C++20 Ranges algorithms fundamentally cannot be ADL-proofed.

```c++
Holder<Incomplete> *a[10] = {}; // ten null pointers
assert(std::count(a, a+10, nullptr) == 10); // OK
assert(std::ranges::count(a, a+10, nullptr) == 10); // hard error
```

This causes a hard error on all possible implementations.

In fact, even the following program causes hard errors:

```c++
using T = Holder<Incomplete>*;

static_assert(std::equality_comparable<T>); // OK
bool x = std::indirectly_comparable<T*, T*, std::equal_to<>>; // hard error
bool y = std::sortable<T*>; // hard error
```

The error happens because `indirectly_comparable<T*, T*, Pred>`
is actually defined as `indirect_binary_predicate<Pred, projected<T*, identity>, projected<T*, identity>>`.
In evaluating that concept, we eventually need to ask whether `*it` is a valid
expression for an iterator of type `projected<T*, identity>`. This means we need
to complete all the associated types of `projected<T*, identity>`, which includes
all the associated types of `T`, which includes `Holder<Incomplete>`.

So, we are in the sad state that `std::sort`, `std::count`, etc., are safe to use
on "dangerous-to-ADL" pointer types, but their `std::ranges::` counterparts are
not.

The problem also exists with projections other than `identity`; for example,

```c++
using T = Holder<Incomplete>*;

Holder<Incomplete> *a[10] = {}; // ten null pointers
auto isNull = [](auto *p) { return p == nullptr; };
assert(std::ranges::count(a, a+10, true, isNull) == 10); // hard error
```

# The solution: ADL-proof `std::projected` # {#solution}

To fix the problem and ADL-proof all the Ranges algorithms, we simply have to
stop `T` from being an associated type of `projected<T*, Proj>`. We can
do this by inserting an ADL firewall; see P2538R1 and [[Disable]] for details
of the technique.

[[P2300R4]] actually provides blanket wording and
a phrase of power, "arguments are not associated entities," that denotes this technique.
However, I don't use that phrase of power here because we need wording that can be DR'ed back
to C++20 and C++23; our wording can't depend on P2300.

If we adopt this proposal and respecify `std::projected` along these lines, then the programmer
will be able to write:

```c++
using T = Holder<Incomplete>*;

static_assert(std::equality_comparable<T>); // OK
static_assert(std::indirectly_comparable<T*, T*, std::equal_to<>>); // will be OK
static_assert(std::sortable<T*>); // will be OK

int main() {
  Holder<Incomplete> *a[10] = {}; // ten null pointers
  auto isNull = [](auto *p) { return p == nullptr; };
  assert(std::count(a, a+10, nullptr) == 10); // OK
  assert(std::ranges::count(a, a+10, nullptr) == 10); // will be OK
  assert(std::ranges::count(a, a+10, true, isNull) == 10); // will be OK
}
```

# Implementation experience # {#experience}

This has been prototyped in Arthur's libc++ fork; see [[Patch]].

The P/R for [[LWG3859]] merge-conflicts with P2538R1; therefore I've included
the fix for LWG3859 as part of P2538R2.


# Proposed wording # {#wording}

Note: I believe this doesn't need a feature-test macro, because it merely enables code that
was ill-formed before, and I can't think of a scenario where you'd want to do one thing
if the feature was available and a different thing if it wasn't.

Modify <a href="https://timsong-cpp.github.io/cppwp/n4868/projected">[projected]</a> as follows:

<blockquote>
Class template `projected` is used to constrain algorithms that accept callable objects
and projections. It combines <del>a</del><ins>an</ins> `indirectly_readable` type `I` and a
callable object type `Proj` into a new `indirectly_readable` type whose `reference` type
is the result of applying `Proj` to the `iter_reference_t` of `I`.

<pre><del>
namespace std {
  template&lt;indirectly_readable I, indirectly_regular_unary_invocable&lt;I> Proj>
  struct projected {
    using value_type = remove_cvref_t&lt;indirect_result_t&lt;Proj&amp;, I>>;
    indirect_result_t&lt;Proj&amp;, I> operator*() const; <i>// not defined</i>
  };

  template&lt;weakly_incrementable I, class Proj>
  struct incrementable_traits&lt;projected&lt;I, Proj>> {
    using difference_type = iter_difference_t&lt;I>;
  };
}
</del><ins>
namespace std {
  template&lt;class I, class Proj>
  struct <i>projected-impl</i> { <i>// exposition only</i>
    struct <i>type</i> { <i>// exposition only</i>
      using value_type = remove_cvref_t&lt;indirect_result_t&lt;Proj&amp;, I>>;
      using difference_type = iter_difference_t&lt;I>; <i>// present only if I models weakly_incrementable</i>
      indirect_result_t&lt;Proj&amp;, I> operator*() const; <i>// not defined</i>
    };
  };

  template&lt;indirectly_readable I, indirectly_regular_unary_invocable&lt;I> Proj>
  using projected = conditional_t&lt;same_as&lt;Proj, identity>, I, <i>projected-impl</i>&lt;I, Proj>::<i>type</i>>;
}
</ins></pre>
</blockquote>


# Straw polls # {#polls}

## Polls taken electronically, May 2022 ## {#taken-polls-2022-05}

In May 2022, LEWG took an electronic straw poll of a number of papers, including P2538R0. The results
are tallied in [P2575R0 "2022-05 Library Evolution Poll Outcomes."](https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2575r0.html#p2538r0-adl-proof-projected)
P2538R0's poll had this result:

<table class="def">
<tr><th style="width: 70%;"></th><th>**SF**</th><th>**F**</th><th>**N**</th><th>**A**</th><th>**SA**</th></tr>

<tr><th><small>Send P2538R0 to LWG for C++23, classified as an improvement of an existing feature.</small></th>
<th> 8 </th><th> 11 </th><th> 2 </th><th> 0 </th><th> 0 </th></tr>
</table>


# Acknowledgments # {#acknowledgments}

- Thanks to Jonathan Wakely and Ville Voutilainen for recommending Arthur write this paper.

- Thanks to Barry Revzin for suggesting the "present only if..." wording, and
    to Hui Xie for pointing out the relevance of [[P2300R4]].

- Thanks to Walter E. Brown for pointing out P2538R1's merge-conflict with [[LWG3859]];
    P2538R2 merges in the proposed fix for LWG3859.


<pre class=biblio>
{
  "Patch": {
    "title": "[libc++] [LWG3859] [P2538] ADL-proof std::projected",
    "authors": [
        "Arthur O'Dwyer"
    ],
    "href": "https://github.com/Quuxplusone/llvm-project/commit/25fe7624552cb601417204f1d0164ae8c91ac4dd",
    "date": "March 2023"
  },
  "Disable": {
    "title": "How hana::type<T> disables ADL",
    "authors": [
        "Arthur O'Dwyer"
    ],
    "href": "https://quuxplusone.github.io/blog/2019/04/09/adl-insanity-round-2/",
    "date": "April 2019"
  },
  "LWG3859": {
    "title": "std::projected cannot handle proxy iterator",
    "authors": [
      "Hewill Kang"
    ],
    "href": "https://cplusplus.github.io/LWG/issue3859",
    "date": "January 2023"
  },
  "P2300R4": {
    "title": "std::execution",
    "authors": [
        "Michał Dominiak",
        "Lewis Baker",
        "Lee Howes",
        "et al."
    ],
    "href": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2022/p2300r4.html",
    "date": "January 2022"
  },
  "Uglification": {
    "title": "ADL can interfere even with uglified names",
    "authors": [
      "Arthur O'Dwyer"
    ],
    "href": "https://quuxplusone.github.io/blog/2019/09/26/uglification-doesnt-stop-adl/",
    "date": "September 2019"
  }
}
</pre>
