<pre class='metadata'>
Title: Forbid defaulting operator=(X&&) &&
Shortname: D2953
Revision: 1
!Draft Revision: 7
Audience: EWG
Status: D
Group: WG21
URL:
Editor: Arthur O'Dwyer, arthur.j.odwyer@gmail.com
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract:
  Current C++ permits explicitly-defaulted special members to differ from their
  implicitly-defaulted counterparts in various ways, including parameter type and
  ref-qualification. This permits implausible
  signatures like `A& operator=(const A&) && = default`, where the left-hand
  operand is rvalue-ref-qualified. We propose to forbid such signatures.
Date: 2023-10-12
</pre>

<style>
hilite  {background-color: #FFFF00; font-weight: bold;}
ins     {background-color: #CCFFCC; text-decoration: underline;}
del     {background-color: #FFCACA; text-decoration: line-through;}
.newcol {border-left: thin solid; border-color: black;}
</style>

# Changelog # {#changelog}

- R1:

    - Propose an "ambitious" overhaul as well as the "conservative" surgery.

- R0:

    - Initial revision.


# Motivation and proposal # {#proposal}

Currently, <a href="https://eel.is/c++draft/dcl.fct.def.default#2.5">[dcl.fct.def.default]/2.5</a>
permits an explicitly defaulted special member function to differ from the
implicit one by adding <i>ref-qualifiers</i>, but not <i>cv-qualifiers</i>.

For example, the signature `const A& operator=(const A&) const& = default` is forbidden
because it is additionally const-qualified, and also because its return type differs
from the implicitly-defaulted `A&`. This might be considered unfortunate, because that's
a reasonable signature for a const-assignable proxy-reference type.
But programmers aren't clamoring for that signature to be supported, so we do not propose to support it here.

Our concern is that the *unrealistic* signature `A& operator=(const A&) && = default` is
*permitted!* This has three minor drawbacks:

* The possibility of these unrealistic signatures makes C++ harder to understand.
    Before writing [[P2952]], Arthur didn't know such signatures were possible.

* The wording to permit these signatures is at least a tiny bit more complicated than
    if they weren't permitted.

* The quirky interaction with [[CWG2586]] and [[P2952]] discussed in the next subsection.

To eliminate all three drawbacks,
we propose that a defaulted copy/move assignment operator should not be allowed to add
to its implicit signature an *rvalue* ref-qualifier.

```cpp
struct C {
  C& operator=(const C&) && = default;
    // Today: Well-formed
    // Tomorrow: Deleted
};

struct D {
  D& operator=(this D&& self, const C&) = default;
    // Today: Well-formed
    // Tomorrow: Deleted
};
```


## Interaction with P2952 ## {#p2952}

[[CWG2586]] (adopted for C++23) permits `operator=` to have an explicit object parameter.

[[P2952]] proposes that `operator=` should (also) be allowed to have a placeholder return type.
If P2952 is adopted without P2953, then we'll have:

```cpp
struct C {
  auto&& operator=(this C&& self, const C&) { return self; }
    // Today: OK, deduces C&&
    // After P2952: Still OK, still deduces C&&
    // Proposed: Still OK, still deduces C&&

  auto&& operator=(this C&& self, const C&) = default;
    // Today: Ill-formed, return type involves placeholder
    // After P2952: OK, deduces C&
    // Proposed (conservative): Deleted, object parameter is not C&
    // Proposed (ambitious): Ill-formed, object parameter is not C&
};
```

The first, non-defaulted, operator "does the natural thing" by returning its left-hand operand,
and deduces `C&&`. The second operator also "does the natural thing" by being defaulted; but
after P2952 it will deduce `C&`. (For rationale, see [[P2952]] §3.3 "Deducing `this` and CWG2586.")
The two "natural" implementations deduce different types! This looks inconsistent.

If we adopt P2953 alongside P2952, then the second `operator=` will go back to being unusable,
which reduces the perception of inconsistency.

<table>
<tr><td></td><th>Today</th><th>P2952</th></tr>
<tr><th>Today</th><td><code>C&&</code>/ill-formed</td><td><code>C&&</code>/<code>C&</code></td></tr>
<tr><th>P2953</th><td><code>C&&</code>/ill-formed</td><td><code>C&&</code>/deleted</td></tr>
</table>


## "Deleted" versus "ill-formed" ## {#deleted-versus-ill-formed}

(See also [[P2952]] §3.2 "Defaulted as deleted".)

<a href="https://eel.is/c++draft/dcl.fct.def.default#2.6">[dcl.fct.def.default]/2.6</a> goes out of its way
to make many explicitly defaulted constructors, assignment operators, and comparison operators
"defaulted as deleted," rather than ill-formed. This was done by [[P0641]] (resolving [[CWG1331]]),
in order to support class templates with "canonically spelled" defaulted declarations:

```cpp
struct A {
  // Permitted by (2.4)
  A(A&) = default;
  A& operator=(A&) = default;
};

template<class T>
struct C {
  T t_;
  explicit C();
  // Permitted, but defaulted-as-deleted, by (2.6), since P0641
  C(const C&) = default;
  C& operator=(const C&) = default;
};

C<A> ca; // OK
```

There is similar wording in <a href="https://eel.is/c++draft/class.spaceship#2.2.sentence-2">[class.spaceship]</a>
and <a href="https://eel.is/c++draft/class.eq#2.sentence-1">[class.eq]</a>. We don't want to interfere with
these use-cases; that is, we want to continue permitting programmers to write things like the above `C<A>`.


## Existing corner cases ## {#corner-cases}

There is vendor divergence in some corner cases. Here is a table of the divergences we found,
plus our opinion as to the conforming behavior, and our proposed behavior.

<small><table>
<tr><th>URL</th><th>Code</th><th>Clang</th><th>GCC</th><th>MSVC</th><th>EDG</th><th class="newcol">Correct</th><th>Proposed<br>(conservative)</th><th>Proposed<br>(ambitious)</th></tr>
<tr><td><a href="https://godbolt.org/z/WezedYYE3">link</a></td><td><pre>C& operator=(C&) = default;</pre></td>
    <td>✓</td><td>✓</td><td>✓</td><td>✓</td><td class="newcol">✓</td><td>✓</td><td>✗</td></tr>
<tr><td><a href="https://godbolt.org/z/hxc9za5KT">link</a></td><td><pre>C& operator=(const C&&) = default;</pre></td>
    <td>deleted</td><td bgcolor="#FFCACA">✗</td><td bgcolor="#FFCACA">✗</td><td>deleted</td><td class="newcol"><a href="https://eel.is/c++draft/dcl.fct.def.default#2.6">deleted</a></td><td>deleted</td><td>✗</td></tr>
<tr><td><a href="https://godbolt.org/z/ojM541bTM">link</a></td><td><pre>C& operator=(const C&) const = default;</pre></td>
    <td>deleted</td><td bgcolor="#FFCACA">✗</td><td bgcolor="#FFCACA">✗</td><td>deleted</td><td class="newcol"><a href="https://eel.is/c++draft/dcl.fct.def.default#2.6">deleted</a></td><td>deleted</td><td>✗</td></tr>
<tr><td><a href="https://godbolt.org/z/hchco3rcK">link</a></td><td><pre>C& operator=(const C&) && = default;</pre></td>
    <td>✓</td><td>✓</td><td>✓</td><td>✓</td><td class="newcol"><a href="https://eel.is/c++draft/dcl.fct.def.default#2.1">✓</a></td><td>deleted</td><td>✗</td></tr>
<tr><td><a href="https://godbolt.org/z/5P6EKrGjo">link</a></td><td><pre>C&& operator=(const C&) && = default;</pre></td>
    <td>✗</td><td>✗</td><td>✗</td><td>✗</td><td class="newcol"><a href="https://eel.is/c++draft/dcl.fct.def.default#2.5">✗</a></td><td>✗</td><td>✗</td></tr>
<tr><td><a href="https://godbolt.org/z/Th33Meeez">link</a></td><td><pre>template&lt;class>
struct C {
  static const C& f();
  C& operator=(decltype(f()) = default;
};</pre></td>
    <td>✓</td><td bgcolor="#FFCACA"><a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86646">✗</a></td><td bgcolor="#FFCACA">✗</td><td bgcolor="#FFCACA">✗</td><td class="newcol">✓</td><td>✓</td><td>✓</td></tr>
<tr><td><a href="https://godbolt.org/z/s676384P9">link</a></td><td><pre>struct M {
  M& operator=(const M&) volatile;
};
struct C {
  volatile M m;
  C& operator=(const C&) = default;
};</pre></td>
    <td>deleted</td><td>deleted</td><td>deleted</td><td bgcolor="#FFCACA">inconsistent</td><td class="newcol"><a href="https://eel.is/c++draft/class.copy.assign#7.3">deleted</a></td><td>deleted</td><td>deleted</td></tr>
</table></small>


# Implementation experience # {#experience}

Arthur has implemented [[#wording]] in his fork of Clang, and used it to compile
both LLVM/Clang/libc++ and another large C++17 codebase. Naturally, it caused
no problems except in the relevant parts of Clang's own test suite.

There is no implementation experience for [[#wording2]].


# Proposed wording (conservative) # {#wording}

## [dcl.fct.def.default] ## {#wording-dcl.fct.def.default}

Note: The only defaultable special member functions are default constructors,
copy/move constructors, copy/move assignment operators, and destructors. Of these,
only the assignment operators can ever be cvref-qualified at all.

Modify <a href="https://eel.is/c++draft/dcl.fct.def.default">[dcl.fct.def.default]</a> as follows:

<small><blockquote>
1․ A function definition whose <i>function-body</i> is of the form `= default ;` is called an <i>explicitly-defaulted</i> definition.
A function that is explicitly defaulted shall

* (1.1) be a special member function or a comparison operator function ([over.binary]), and

* (1.2) not have default arguments.

<p>2․ An explicitly defaulted special member function <code>F</code><sub>1</sub> is allowed to differ
from the corresponding special member function <code>F</code><sub>2</sub> that would have been implicitly declared, as follows:

* (2.1) <ins>if <code>F</code><sub>2</sub> is an assignment operator,</ins> <del><code>F</code><sub>1</sub>
    and <code>F</code><sub>2</sub> may have differing <i>ref-qualifiers</i></del> <ins><code>F</code><sub>1</sub>
    may have an lvalue <i>ref-qualifier</i></ins>;

* (2.2) if <code>F</code><sub>2</sub> <del>has an implicit object parameter of type “reference to C”</del> <ins>is
    an assignment operator with an implicit object parameter of type `C&`</ins>,
    <code>F</code><sub>1</sub> may <del>be an explicit object member function whose</del> <ins>have an</ins> explicit
    object parameter <del>is</del> of type <del>(possibly
    different) “reference to C”</del> <ins>`C&`</ins>, in which case the type of <code>F</code><sub>1</sub>
    would differ from the type of <code>F</code><sub>2</sub> in that the type of <code>F</code><sub>1</sub>
    has an additional parameter;

* (2.3) <code>F</code><sub>1</sub> and <code>F</code><sub>2</sub> may have differing exception specifications; and

* (2.4) if <code>F</code><sub>2</sub> has a non-object parameter of type `const C&`, the corresponding
    non-object parameter of <code>F</code><sub>1</sub> may be of type `C&`.

<p>If the type of <code>F</code><sub>1</sub> differs from the type of <code>F</code><sub>2</sub>
in a way other than as allowed by the preceding rules, then:

* (2.5) if <del><code>F</code><sub>1</sub></del> <ins><code>F</code><sub>2</sub></ins> is an assignment operator, and the return type of
    <code>F</code><sub>1</sub> differs from the return type of <code>F</code><sub>2</sub>
    or <code>F</code><sub>1</sub>'s non-object parameter type is not a reference, the program is ill-formed;

* (2.6) otherwise, if <code>F</code><sub>1</sub> is explicitly defaulted on its first declaration, it is defined as deleted;

* (2.7) otherwise, the program is ill-formed.

<p>[...]
</blockquote></small>

# Proposed wording (ambitious) # {#wording2}

Note: The intent of this "ambitious" wording is to lock down the signatures
of defaultable member functions as much as possible, and make errors as eager
as possible, *except* in the cases covered by [[#deleted-versus-ill-formed]]
(which we want to keep working, i.e., "defaulted as deleted").

## [dcl.fct.def.default] ## {#wording2-dcl.fct.def.default}

Modify <a href="https://eel.is/c++draft/dcl.fct.def.default">[dcl.fct.def.default]</a> as follows:

<small><blockquote>
1․ A function definition whose <i>function-body</i> is of the form `= default ;` is called an <i>explicitly-defaulted</i> definition.
A function that is explicitly defaulted shall

* (1.1) be a special member function or a comparison operator function ([over.binary]), and

* (1.2) not have default arguments.

<p>2․ An explicitly defaulted special member function <code>F</code><sub>1</sub> is allowed to differ
from the corresponding special member function <code>F</code><sub>2</sub> that would have been implicitly declared, as follows:

* (2.1) <ins>if <code>F</code><sub>2</sub> is an assignment operator,</ins> <del><code>F</code><sub>1</sub>
    and <code>F</code><sub>2</sub> may have differing <i>ref-qualifiers</i></del> <ins><code>F</code><sub>1</sub>
    may have an lvalue <i>ref-qualifier</i></ins>;

* (2.2) if <code>F</code><sub>2</sub> <del>has an implicit object parameter of type “reference to C”</del> <ins>is
    an assignment operator with an implicit object parameter of type `C&`</ins>,
    <code>F</code><sub>1</sub> may <del>be an explicit object member function whose</del> <ins>have an</ins> explicit
    object parameter <del>is</del> of type <del>(possibly
    different) “reference to C”</del> <ins>`C&`</ins>, in which case the type of <code>F</code><sub>1</sub>
    would differ from the type of <code>F</code><sub>2</sub> in that the type of <code>F</code><sub>1</sub>
    has an additional parameter; <ins>and</ins>

* (2.3) <code>F</code><sub>1</sub> and <code>F</code><sub>2</sub> may have differing exception specifications; <del>and</del>

* (2.4) if <code>F</code><sub>2</sub> has a non-object parameter of type `const C&`, the corresponding
    non-object parameter of <code>F</code><sub>1</sub> may be of type `C&`<ins>; and</ins>

* <ins>(2.5) if <code>F</code><sub>2</sub> has a non-object parameter of type `C&`, the corresponding
    non-object parameter of <code>F</code><sub>1</sub> may be of type `const C&`</ins>.

<p>If the type of <code>F</code><sub>1</sub> differs from the type of <code>F</code><sub>2</sub>
in a way other than as allowed by the preceding rules, then<del>:</del>

* <del>(2.5) if <code>F</code><sub>1</sub> is an assignment operator, and the return type of
    <code>F</code><sub>1</sub> differs from the return type of <code>F</code><sub>2</sub>
    or <code>F</code><sub>1</sub>'s non-object parameter type is not a reference, the program is ill-formed;</del>

* <del>(2.6) otherwise, if <code>F</code><sub>1</sub> is explicitly
    defaulted on its first declaration, it is defined as deleted;</del>

* <del>(2.7) otherwise,</del> the program is ill-formed.

<p>[...]
</blockquote></small>

## [class.copy.assign] ## {#wording2-class.copy.assign}

Note: If we do the wording patch above, then I think nothing in [class.copy.assign] needs
to change. But much of the wording above is concerned specifically with copy/move assignment operators,
so it might be nice to move that wording out of [dcl.fct.def.default] and into [class.copy.assign].
Also note that right now a difference in `noexcept`-ness is handled explicitly by [dcl.fct.def.default]
for special member functions but only by omission-and-note in <a href="https://eel.is/c++draft/class.compare#default-note-1">[class.compare]</a>
for comparison operators.

Modify <a href="https://eel.is/c++draft/class.copy.assign">[class.copy.assign]</a> as follows:

<small><blockquote>
TODO FIXME BUG HACK
</blockquote></small>



# Proposed straw polls # {#straw-polls}

The next revision of this paper (if any) will be guided by the outcomes of these three straw polls.

<table class="def">
<tr><th style="width: 70%;"></th><th>**SF**</th><th>**F**</th><th>**N**</th><th>**A**</th><th>**SA**</th></tr>

<tr><th><small>EWG would like to forbid rvalue-ref-qualified assignment operators (by any means, not necessarily by this proposed wording).</th>
<th> – </th><th> — </th><th> — </th><th> — </th><th> — </th></tr>

<tr><th><small>EWG would like to pursue [[#wording2]] (regardless of the next poll).</th>
<th> – </th><th> — </th><th> — </th><th> — </th><th> — </th></tr>

<tr><th><small>Advance [[#wording]] to CWG (regardless of the previous poll).</th>
<th> – </th><th> — </th><th> — </th><th> — </th><th> — </th></tr>
</table>

<pre class=biblio>
{
  "CWG1331": {
    "title": "const mismatch with defaulted copy constructor",
    "authors": [
      "Daniel Krügler"
    ],
    "href": "https://cplusplus.github.io/CWG/issues/1331.html",
    "date": "June 2011"
  },
  "CWG2586": {
    "title": "Explicit object parameter for assignment and comparison",
    "authors": [
      "Barry Revzin"
    ],
    "href": "https://cplusplus.github.io/CWG/issues/2586.html",
    "date": "May–July 2022"
  },
  "P0641": {
    "title": "Resolving CWG1331: const mismatch with defaulted copy constructor",
    "authors": [
      "Daniel Krügler",
      "Botond Ballo"
    ],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0641r2.html",
    "date": "November 2017"
  },
  "P2952": {
    "title": "auto& operator=(X&&) = default",
    "authors": [
      "Arthur O'Dwyer",
      "Matthew Taylor"
    ],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2952r0.html",
    "date": "August 2023"
  }
}
</pre>
