<pre class='metadata'>
Title: Forbid defaulting operator=(X&&) &&
Shortname: D2953
Revision: 1
!Draft Revision: 6
Audience: EWG
Status: D
Group: WG21
URL:
Editor: Arthur O'Dwyer, arthur.j.odwyer@gmail.com
Markup Shorthands: markdown yes, biblio yes, markup yes
Abstract:
  Current C++ permits explicitly-defaulted special members to differ from their
  implicitly-defaulted counterparts in various ways, including parameter type and
  ref-qualification. This permits implausible
  signatures like `A& operator=(const A&) && = default`, where the left-hand
  operand is rvalue-ref-qualified. We propose to forbid such signatures.
Date: 2023-09-12
</pre>

<style>
hilite  {background-color: #FFFF00; font-weight: bold;}
ins  {background-color: #CCFFCC; text-decoration: underline;}
del  {background-color: #FFCACA; text-decoration: line-through;}
</style>

# Changelog # {#changelog}

- R1:

    - TODO FIXME BUG HACK: Note the editorial clarification in e1bcedcf9516290f285c3fa3e7301dc92b94c515.
        At first I thought it was backwards, but now I think it's correct.

- R0:

    - Initial revision.


# Motivation and proposal # {#proposal}

Currently, <a href="https://eel.is/c++draft/dcl.fct.def.default#2.5">[dcl.fct.def.default]/2.5</a>
permits an explicitly defaulted special member function to differ from the
implicit one by adding <i>ref-qualifiers</i>, but not <i>cv-qualifiers</i>.

For example, the signature `const A& operator=(const A&) const& = default` is forbidden
because it is additionally const-qualified, and also because its return type differs
from the implicitly-defaulted `A&`. This might be considered unfortunate, because that's
a reasonable signature for a const-assignable proxy-reference type.
But programmers aren't clamoring for that signature to be supported, so we do not propose to support it here.

Our concern is that the *unrealistic* signature `A& operator=(const A&) && = default` is
*permitted!* This has three minor drawbacks:

* The possibility of these unrealistic signatures makes C++ harder to understand.
    Before writing [[P2952]], Arthur didn't know such signatures were possible.

* The wording to permit these signatures is at least a tiny bit more complicated than
    if they weren't permitted.

* The quirky interaction with [[CWG2586]] and [[P2952]] discussed in the next subsection.

To eliminate all three drawbacks,
we propose that a defaulted copy/move assignment operator should not be permitted to add
to its implicit signature an *rvalue* ref-qualifier (nor an explicit object parameter
of rvalue reference type).


## Interaction with P2952 ## {#p2952}

[[CWG2586]] (adopted for C++23) permits `operator=` to have an explicit object parameter.

[[P2952]] proposes that `operator=` should (also) be allowed to have a placeholder return type.
If P2952 is adopted without P2953, then we will have the following pub-quiz fodder:

```cpp
struct C {
  auto&& operator=(this C&& self, const C&) { return self; }
    // Today: OK, deduces C&&
    // After P2952: Still OK, still deduces C&&
    // Proposed: Still OK, still deduces C&&

  auto&& operator=(this C&& self, const C&) = default;
    // Today: Ill-formed, return type involves placeholder
    // After P2952: OK, deduces C&
    // Proposed: Deleted, object parameter is not C&
};
```

The first, non-defaulted, operator "does the natural thing" by returning its left-hand operand,
and deduces `C&&`. The second operator also "does the natural thing" by being defaulted; but
after P2952 it will deduce `C&`. (For rationale, see [[P2952]] §3.3 "Deducing `this` and CWG2586.")
The two "natural" implementations deduce different types! This might be perceived as inconsistency.

If we adopt P2953 alongside P2952, then the second `operator=` will go back to being unusable,
which reduces the perception of inconsistency.

<table>
<tr><td></td><th>Today</th><th>P2952</th></tr>
<tr><th>Today</th><td><code>C&&</code>/ill-formed</td><td><code>C&&</code>/<code>C&</code></td></tr>
<tr><th>P2953</th><td><code>C&&</code>/ill-formed</td><td><code>C&&</code>/deleted</td></tr>
</table>


## "Deleted" versus "ill-formed" ## {#deleted-versus-ill-formed}

(See also [[P2952]] §3.2 "Defaulted as deleted".)

<a href="https://eel.is/c++draft/dcl.fct.def.default#2.6">[dcl.fct.def.default]/2.6</a> goes out of its way
to make many explicitly defaulted constructors, assignment operators, and comparison operators
"defaulted as deleted," rather than ill-formed. This was done by [[P0641]] (resolving [[CWG1331]]),
in order to support class templates with "canonically spelled" defaulted declarations:

```cpp
struct A {
  // Permitted by (2.4)
  A(A&) = default;
  A& operator=(A&) = default;
};

template<class T>
struct C {
  T t_;
  explicit C();
  // Permitted, but defaulted-as-deleted, by (2.6), since P0641
  C(const C&) = default;
  C& operator=(const C&) = default;
};

C<A> ca; // OK
```

However, the current wording also seems to require implementations to support weird stuff
like the following. (Clang handles this example correctly; GCC, MSVC, and EDG
already non-conformingly treat *both* `cl` and `cr` as ill-formed. This is
GCC bug [#86646](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=86646).)

```cpp
template<template<class> class TT>
struct C {
  C& operator=(TT<const C>) = default;
};

C<std::add_lvalue_reference_t> cl;
  // OK, operator= is defaulted
  // (and GCC/MSVC/EDG have a bug)

C<std::add_rvalue_reference_t> cr;
  // OK, operator= is defaulted as deleted
  // (but why not just make it ill-formed?)
```

P2953 isn't yet proposing to change the complicated status quo, but Arthur would certainly like
to learn the status quo's rationale. If we were willing to aggressively change the status quo,
we could simplify <a href="https://eel.is/c++draft/dcl.fct.def.default">[dcl.fct.def.default]</a>
something like this: [TODO FIXME BUG HACK: revisit this]

<small><blockquote>
1․ A function definition whose <i>function-body</i> is of the form `= default ;` is called an <i>explicitly-defaulted</i> definition.
A function that is explicitly defaulted shall

* (1.1) be a special member function or a comparison operator function ([over.binary]), and

* (1.2) not have default arguments.

<p>2․ An explicitly defaulted special member function <code>F</code><sub>1</sub> is allowed to differ
from the corresponding special member function <code>F</code><sub>2</sub> that would have been implicitly declared, as follows:

* (2.1) <ins>if <code>F</code><sub>2</sub> is an assignment operator,</ins> <del><code>F</code><sub>1</sub>
    and <code>F</code><sub>2</sub> may have differing <i>ref-qualifiers</i></del> <ins><code>F</code><sub>1</sub>
    may have an lvalue <i>ref-qualifier</i></ins>;

* (2.2) if <code>F</code><sub>2</sub> <del>has an implicit object parameter of type “reference to C”</del> <ins>is
    an assignment operator with an implicit object parameter of type `C&`</ins>,
    <code>F</code><sub>1</sub> may <del>be an explicit object member function whose</del> <ins>have an</ins> explicit
    object parameter <del>is</del> of type <del>(possibly
    different) “reference to C”</del> <ins>`C&`</ins>, in which case the type of <code>F</code><sub>1</sub>
    would differ from the type of <code>F</code><sub>2</sub> in that the type of <code>F</code><sub>1</sub>
    has an additional parameter; <ins>and</ins>

* (2.3) <code>F</code><sub>1</sub> and <code>F</code><sub>2</sub> may have differing exception specifications<ins>.</ins> <del>; and</del>

* <del>(2.4) if <code>F</code><sub>2</sub> has a non-object parameter of type `const C&`, the corresponding
    non-object parameter of <code>F</code><sub>1</sub> may be of type `C&`.</del>

<p>If the type of <code>F</code><sub>1</sub> differs from the type of <code>F</code><sub>2</sub>
in a way other than as allowed by the preceding rules, then:

* <del>(2.5) if <code>F</code><sub>1</sub> is an assignment operator, and the return type of
    <code>F</code><sub>1</sub> differs from the return type of <code>F</code><sub>2</sub>
    or <code>F</code><sub>1</sub>'s non-object parameter type is not a reference, the program is ill-formed;</del>

* (2.6) <del>otherwise,</del> if <code>F</code><sub>1</sub> is <ins>a three-way comparison operator</ins> explicitly
    defaulted on its first declaration, it is defined as deleted;

* (2.7) otherwise, the program is ill-formed.

<p>[...]
</blockquote></small>

Again, P2953 doesn't yet propose the above change; but it would be good to know why we shouldn't.


## Existing corner cases ## {#corner-cases}

There is vendor divergence in some corner cases. Here is a table of the divergences we found,
plus our opinion as to the conforming behavior, and our proposed behavior.

<small><table>
<tr><th>URL</th><th>Code</th><th>Clang</th><th>GCC</th><th>MSVC</th><th>EDG</th><th>Correct</th></tr>
<tr><td><a href="https://godbolt.org/z/WezedYYE3">link</a></td><td><pre>C& operator=(C&) = default;</pre></td>
    <td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓<br>(§2.2: ✗)</td></tr>
<tr><td><a href="https://godbolt.org/z/hxc9za5KT">link</a></td><td><pre>C& operator=(const C&&) = default;</pre></td>
    <td>deleted</td><td bgcolor="#FFCACA">✗</td><td bgcolor="#FFCACA">✗</td><td>deleted</td><td><a href="https://eel.is/c++draft/dcl.fct.def.default#2.6">deleted</a><br>(§2.2: ✗)</td></tr>
<tr><td><a href="https://godbolt.org/z/ojM541bTM">link</a></td><td><pre>C& operator=(const C&) const = default;</pre></td>
    <td>deleted</td><td bgcolor="#FFCACA">✗</td><td bgcolor="#FFCACA">✗</td><td>deleted</td><td><a href="https://eel.is/c++draft/dcl.fct.def.default#2.6">deleted</a><br>(§2.2: ✗)</td></tr>
<tr><td><a href="https://godbolt.org/z/hchco3rcK">link</a></td><td><pre>C& operator=(const C&) && = default;</pre></td>
    <td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>Today: <a href="https://eel.is/c++draft/dcl.fct.def.default#2.1">✓</a><br>Proposed: deleted<br>(§2.2: ✗)</td></tr>
<tr><td><a href="https://godbolt.org/z/5P6EKrGjo">link</a></td><td><pre>C&& operator=(const C&) && = default;</pre></td>
    <td>✗</td><td>✗</td><td>✗</td><td>✗</td><td><a href="https://eel.is/c++draft/dcl.fct.def.default#2.5">✗</a></td></tr>
<tr><td><a href="https://godbolt.org/z/Th33Meeez">link</a></td><td><pre>template&lt;class>
struct C {
  C& operator=(std::add_lvalue_reference_t&lt;const C>) = default;
};</pre></td>
    <td>✓</td><td bgcolor="#FFCACA">✗</td><td bgcolor="#FFCACA">✗</td><td bgcolor="#FFCACA">✗</td><td>✓</td></tr>
</table></small>

## Impact on existing code ## {#impact}

This proposal takes code that was formerly well-formed C++23, and makes it ill-formed.
The affected constructs are extremely implausible in Arthur's opinion; but of course we
need some implementation and usage experience in a real compiler before adopting this proposal.

```cpp
struct C {
  C& operator=(const C&) && = default;
    // Today: Well-formed
    // Tomorrow: Deleted
};

struct D {
  D& operator=(this D&& self, const C&) = default;
    // Today: Well-formed
    // Tomorrow: Deleted
};
```


# Implementation experience # {#experience}

None yet.

# Proposed wording # {#wording}

## [dcl.fct.def.default] ## {#wording-dcl.fct.def.default}

Note: The only defaultable special member functions are default constructors,
copy/move constructors, copy/move assignment operators, and destructors. Of these,
only the assignment operators can ever be cvref-qualified at all.

Modify <a href="https://eel.is/c++draft/dcl.fct.def.default">[dcl.fct.def.default]</a> as follows:

<small><blockquote>
1․ A function definition whose <i>function-body</i> is of the form `= default ;` is called an <i>explicitly-defaulted</i> definition.
A function that is explicitly defaulted shall

* (1.1) be a special member function or a comparison operator function ([over.binary]), and

* (1.2) not have default arguments.

<p>2․ An explicitly defaulted special member function <code>F</code><sub>1</sub> is allowed to differ
from the corresponding special member function <code>F</code><sub>2</sub> that would have been implicitly declared, as follows:

* (2.1) <ins>if <code>F</code><sub>2</sub> is an assignment operator,</ins> <del><code>F</code><sub>1</sub>
    and <code>F</code><sub>2</sub> may have differing <i>ref-qualifiers</i></del> <ins><code>F</code><sub>1</sub>
    may have an lvalue <i>ref-qualifier</i></ins>;

* (2.2) if <code>F</code><sub>2</sub> <del>has an implicit object parameter of type “reference to C”</del> <ins>is
    an assignment operator with an implicit object parameter of type `C&`</ins>,
    <code>F</code><sub>1</sub> may <del>be an explicit object member function whose</del> <ins>have an</ins> explicit
    object parameter <del>is</del> of type <del>(possibly
    different) “reference to C”</del> <ins>`C&`</ins>, in which case the type of <code>F</code><sub>1</sub>
    would differ from the type of <code>F</code><sub>2</sub> in that the type of <code>F</code><sub>1</sub>
    has an additional parameter;

* (2.3) <code>F</code><sub>1</sub> and <code>F</code><sub>2</sub> may have differing exception specifications; and

* (2.4) if <code>F</code><sub>2</sub> has a non-object parameter of type `const C&`, the corresponding
    non-object parameter of <code>F</code><sub>1</sub> may be of type `C&`.

<p>If the type of <code>F</code><sub>1</sub> differs from the type of <code>F</code><sub>2</sub>
in a way other than as allowed by the preceding rules, then:

* (2.5) if <del><code>F</code><sub>1</sub></del> <ins><code>F</code><sub>2</sub></ins> is an assignment operator, and the return type of
    <code>F</code><sub>1</sub> differs from the return type of <code>F</code><sub>2</sub>
    or <code>F</code><sub>1</sub>'s non-object parameter type is not a reference, the program is ill-formed;

* (2.6) otherwise, if <code>F</code><sub>1</sub> is explicitly defaulted on its first declaration, it is defined as deleted;

* (2.7) otherwise, the program is ill-formed.

<p>[...]
</blockquote></small>

## [class.copy.assign] ## {#wording-class.copy.assign}

Note: If we do the wording patch above, then I think nothing in [class.copy.assign] needs
to change. But much of the wording above is concerned specifically with copy/move assignment operators,
so it might be nice to move that wording out of [dcl.fct.def.default] and into [class.copy.assign].
Also note that right now a difference in `noexcept`-ness is handled explicitly by [dcl.fct.def.default]
for special member functions but only by omission-and-note in <a href="https://eel.is/c++draft/class.compare#default-note-1">[class.compare]</a>
for comparison operators.

Modify <a href="https://eel.is/c++draft/class.copy.assign">[class.copy.assign]</a> as follows:

<small><blockquote>
TODO FIXME BUG HACK
</blockquote></small>

# Proposed straw polls # {#straw-polls}

The next revision of this paper (if any) will be guided by the outcomes of these two straw polls.

<table class="def">
<tr><th style="width: 70%;"></th><th>**SF**</th><th>**F**</th><th>**N**</th><th>**A**</th><th>**SA**</th></tr>

<tr><th><small>EWG would like to forbid rvalue-ref-qualified assignment operators (by any means, not necessarily by this proposed wording).</th>
<th> – </th><th> — </th><th> — </th><th> — </th><th> — </th></tr>

<tr><th><small>P2953R1 should pursue §2.2's wording, making some "defaulted-as-deleted" operators into hard errors.</th>
<th> – </th><th> — </th><th> — </th><th> — </th><th> — </th></tr>
</table>

<pre class=biblio>
{
  "CWG1331": {
    "title": "const mismatch with defaulted copy constructor",
    "authors": [
      "Daniel Krügler"
    ],
    "href": "https://cplusplus.github.io/CWG/issues/1331.html",
    "date": "June 2011"
  },
  "CWG2586": {
    "title": "Explicit object parameter for assignment and comparison",
    "authors": [
      "Barry Revzin"
    ],
    "href": "https://cplusplus.github.io/CWG/issues/2586.html",
    "date": "May–July 2022"
  },
  "P0641": {
    "title": "Resolving CWG1331: const mismatch with defaulted copy constructor",
    "authors": [
      "Daniel Krügler",
      "Botond Ballo"
    ],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0641r2.html",
    "date": "November 2017"
  },
  "P2952": {
    "title": "auto& operator=(X&&) = default",
    "authors": [
      "Arthur O'Dwyer",
      "Matthew Taylor"
    ],
    "href": "https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2023/p2952r0.html",
    "date": "August 2023"
  }
}
</pre>
